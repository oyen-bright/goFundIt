// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockCommentService is an autogenerated mock type for the CommentService type
type MockCommentService struct {
	mock.Mock
}

type MockCommentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentService) EXPECT() *MockCommentService_Expecter {
	return &MockCommentService_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: comment, campaignID, activityID, userHandle
func (_m *MockCommentService) CreateComment(comment *models.Comment, campaignID string, activityID uint, userHandle string) error {
	ret := _m.Called(comment, campaignID, activityID, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Comment, string, uint, string) error); ok {
		r0 = rf(comment, campaignID, activityID, userHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentService_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockCommentService_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - comment *models.Comment
//   - campaignID string
//   - activityID uint
//   - userHandle string
func (_e *MockCommentService_Expecter) CreateComment(comment interface{}, campaignID interface{}, activityID interface{}, userHandle interface{}) *MockCommentService_CreateComment_Call {
	return &MockCommentService_CreateComment_Call{Call: _e.mock.On("CreateComment", comment, campaignID, activityID, userHandle)}
}

func (_c *MockCommentService_CreateComment_Call) Run(run func(comment *models.Comment, campaignID string, activityID uint, userHandle string)) *MockCommentService_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Comment), args[1].(string), args[2].(uint), args[3].(string))
	})
	return _c
}

func (_c *MockCommentService_CreateComment_Call) Return(_a0 error) *MockCommentService_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentService_CreateComment_Call) RunAndReturn(run func(*models.Comment, string, uint, string) error) *MockCommentService_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: commentID, userHandle
func (_m *MockCommentService) DeleteComment(commentID string, userHandle string) error {
	ret := _m.Called(commentID, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(commentID, userHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentService_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockCommentService_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - commentID string
//   - userHandle string
func (_e *MockCommentService_Expecter) DeleteComment(commentID interface{}, userHandle interface{}) *MockCommentService_DeleteComment_Call {
	return &MockCommentService_DeleteComment_Call{Call: _e.mock.On("DeleteComment", commentID, userHandle)}
}

func (_c *MockCommentService_DeleteComment_Call) Run(run func(commentID string, userHandle string)) *MockCommentService_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockCommentService_DeleteComment_Call) Return(_a0 error) *MockCommentService_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentService_DeleteComment_Call) RunAndReturn(run func(string, string) error) *MockCommentService_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivityComments provides a mock function with given fields: activityID
func (_m *MockCommentService) GetActivityComments(activityID uint) ([]models.Comment, error) {
	ret := _m.Called(activityID)

	if len(ret) == 0 {
		panic("no return value specified for GetActivityComments")
	}

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Comment, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Comment); ok {
		r0 = rf(activityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentService_GetActivityComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivityComments'
type MockCommentService_GetActivityComments_Call struct {
	*mock.Call
}

// GetActivityComments is a helper method to define mock.On call
//   - activityID uint
func (_e *MockCommentService_Expecter) GetActivityComments(activityID interface{}) *MockCommentService_GetActivityComments_Call {
	return &MockCommentService_GetActivityComments_Call{Call: _e.mock.On("GetActivityComments", activityID)}
}

func (_c *MockCommentService_GetActivityComments_Call) Run(run func(activityID uint)) *MockCommentService_GetActivityComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockCommentService_GetActivityComments_Call) Return(_a0 []models.Comment, _a1 error) *MockCommentService_GetActivityComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentService_GetActivityComments_Call) RunAndReturn(run func(uint) ([]models.Comment, error)) *MockCommentService_GetActivityComments_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentReplies provides a mock function with given fields: commentID
func (_m *MockCommentService) GetCommentReplies(commentID string) ([]models.Comment, error) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentReplies")
	}

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Comment, error)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Comment); ok {
		r0 = rf(commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentService_GetCommentReplies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentReplies'
type MockCommentService_GetCommentReplies_Call struct {
	*mock.Call
}

// GetCommentReplies is a helper method to define mock.On call
//   - commentID string
func (_e *MockCommentService_Expecter) GetCommentReplies(commentID interface{}) *MockCommentService_GetCommentReplies_Call {
	return &MockCommentService_GetCommentReplies_Call{Call: _e.mock.On("GetCommentReplies", commentID)}
}

func (_c *MockCommentService_GetCommentReplies_Call) Run(run func(commentID string)) *MockCommentService_GetCommentReplies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommentService_GetCommentReplies_Call) Return(_a0 []models.Comment, _a1 error) *MockCommentService_GetCommentReplies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentService_GetCommentReplies_Call) RunAndReturn(run func(string) ([]models.Comment, error)) *MockCommentService_GetCommentReplies_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: comment, userHandle
func (_m *MockCommentService) UpdateComment(comment models.Comment, userHandle string) error {
	ret := _m.Called(comment, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Comment, string) error); ok {
		r0 = rf(comment, userHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentService_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockCommentService_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - comment models.Comment
//   - userHandle string
func (_e *MockCommentService_Expecter) UpdateComment(comment interface{}, userHandle interface{}) *MockCommentService_UpdateComment_Call {
	return &MockCommentService_UpdateComment_Call{Call: _e.mock.On("UpdateComment", comment, userHandle)}
}

func (_c *MockCommentService_UpdateComment_Call) Run(run func(comment models.Comment, userHandle string)) *MockCommentService_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Comment), args[1].(string))
	})
	return _c
}

func (_c *MockCommentService_UpdateComment_Call) Return(_a0 error) *MockCommentService_UpdateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentService_UpdateComment_Call) RunAndReturn(run func(models.Comment, string) error) *MockCommentService_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentService creates a new instance of MockCommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentService {
	mock := &MockCommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
