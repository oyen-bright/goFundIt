// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ContributorService is an autogenerated mock type for the ContributorService type
type ContributorService struct {
	mock.Mock
}

// AddContributorToCampaign provides a mock function with given fields: contribution
func (_m *ContributorService) AddContributorToCampaign(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for AddContributorToCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanContributeToCampaign provides a mock function with given fields: userID, campaignID
func (_m *ContributorService) CanContributeToCampaign(userID uint, campaignID string) (bool, error) {
	ret := _m.Called(userID, campaignID)

	if len(ret) == 0 {
		panic("no return value specified for CanContributeToCampaign")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (bool, error)); ok {
		return rf(userID, campaignID)
	}
	if rf, ok := ret.Get(0).(func(uint, string) bool); ok {
		r0 = rf(userID, campaignID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContributeToCampaign provides a mock function with given fields: userID, campaignID, amount
func (_m *ContributorService) ContributeToCampaign(userID uint, campaignID string, amount float64) error {
	ret := _m.Called(userID, campaignID, amount)

	if len(ret) == 0 {
		panic("no return value specified for ContributeToCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, float64) error); ok {
		r0 = rf(userID, campaignID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContributorByID provides a mock function with given fields: contributorID
func (_m *ContributorService) GetContributorByID(contributorID uint) (models.Contributor, error) {
	ret := _m.Called(contributorID)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorByID")
	}

	var r0 models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Contributor, error)); ok {
		return rf(contributorID)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Contributor); ok {
		r0 = rf(contributorID)
	} else {
		r0 = ret.Get(0).(models.Contributor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(contributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContributorByUserHandle provides a mock function with given fields: userHandle
func (_m *ContributorService) GetContributorByUserHandle(userHandle uint) (models.Contributor, error) {
	ret := _m.Called(userHandle)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorByUserHandle")
	}

	var r0 models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Contributor, error)); ok {
		return rf(userHandle)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Contributor); ok {
		r0 = rf(userHandle)
	} else {
		r0 = ret.Get(0).(models.Contributor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userHandle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContributors provides a mock function with given fields: campaignID
func (_m *ContributorService) GetContributors(campaignID string) ([]models.Contributor, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetContributors")
	}

	var r0 []models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Contributor, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Contributor); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contributor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailsOfExistingContributors provides a mock function with given fields: emails
func (_m *ContributorService) GetEmailsOfExistingContributors(emails []string) ([]string, error) {
	ret := _m.Called(emails)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsOfExistingContributors")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(emails)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayment provides a mock function with given fields: paymentID
func (_m *ContributorService) ProcessPayment(paymentID string) error {
	ret := _m.Called(paymentID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefundPayment provides a mock function with given fields: paymentID
func (_m *ContributorService) RefundPayment(paymentID string) error {
	ret := _m.Called(paymentID)

	if len(ret) == 0 {
		panic("no return value specified for RefundPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveContributorFromCampaign provides a mock function with given fields: contribution
func (_m *ContributorService) RemoveContributorFromCampaign(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContributorFromCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContributorService creates a new instance of ContributorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContributorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContributorService {
	mock := &ContributorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
