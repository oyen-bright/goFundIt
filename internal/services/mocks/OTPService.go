// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OTPService is an autogenerated mock type for the OTPService type
type OTPService struct {
	mock.Mock
}

// RequestOTP provides a mock function with given fields: email, name
func (_m *OTPService) RequestOTP(email string, name string) (models.Otp, error) {
	ret := _m.Called(email, name)

	if len(ret) == 0 {
		panic("no return value specified for RequestOTP")
	}

	var r0 models.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Otp, error)); ok {
		return rf(email, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Otp); ok {
		r0 = rf(email, name)
	} else {
		r0 = ret.Get(0).(models.Otp)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTP provides a mock function with given fields: email, otp, requestId
func (_m *OTPService) VerifyOTP(email string, otp string, requestId string) (models.Otp, error) {
	ret := _m.Called(email, otp, requestId)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 models.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (models.Otp, error)); ok {
		return rf(email, otp, requestId)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) models.Otp); ok {
		r0 = rf(email, otp, requestId)
	} else {
		r0 = ret.Get(0).(models.Otp)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, otp, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOTPService creates a new instance of OTPService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPService {
	mock := &OTPService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
