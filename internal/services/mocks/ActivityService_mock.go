// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockActivityService is an autogenerated mock type for the ActivityService type
type MockActivityService struct {
	mock.Mock
}

type MockActivityService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActivityService) EXPECT() *MockActivityService_Expecter {
	return &MockActivityService_Expecter{mock: &_m.Mock}
}

// ApproveActivity provides a mock function with given fields: activityID, userHandle, key
func (_m *MockActivityService) ApproveActivity(activityID uint, userHandle string, key string) (*models.Activity, error) {
	ret := _m.Called(activityID, userHandle, key)

	if len(ret) == 0 {
		panic("no return value specified for ApproveActivity")
	}

	var r0 *models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) (*models.Activity, error)); ok {
		return rf(activityID, userHandle, key)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) *models.Activity); ok {
		r0 = rf(activityID, userHandle, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(activityID, userHandle, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityService_ApproveActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApproveActivity'
type MockActivityService_ApproveActivity_Call struct {
	*mock.Call
}

// ApproveActivity is a helper method to define mock.On call
//   - activityID uint
//   - userHandle string
//   - key string
func (_e *MockActivityService_Expecter) ApproveActivity(activityID interface{}, userHandle interface{}, key interface{}) *MockActivityService_ApproveActivity_Call {
	return &MockActivityService_ApproveActivity_Call{Call: _e.mock.On("ApproveActivity", activityID, userHandle, key)}
}

func (_c *MockActivityService_ApproveActivity_Call) Run(run func(activityID uint, userHandle string, key string)) *MockActivityService_ApproveActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockActivityService_ApproveActivity_Call) Return(_a0 *models.Activity, _a1 error) *MockActivityService_ApproveActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityService_ApproveActivity_Call) RunAndReturn(run func(uint, string, string) (*models.Activity, error)) *MockActivityService_ApproveActivity_Call {
	_c.Call.Return(run)
	return _c
}

// CreateActivity provides a mock function with given fields: activity, userHandle, campaignId, key
func (_m *MockActivityService) CreateActivity(activity models.Activity, userHandle string, campaignId string, key string) (models.Activity, error) {
	ret := _m.Called(activity, userHandle, campaignId, key)

	if len(ret) == 0 {
		panic("no return value specified for CreateActivity")
	}

	var r0 models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Activity, string, string, string) (models.Activity, error)); ok {
		return rf(activity, userHandle, campaignId, key)
	}
	if rf, ok := ret.Get(0).(func(models.Activity, string, string, string) models.Activity); ok {
		r0 = rf(activity, userHandle, campaignId, key)
	} else {
		r0 = ret.Get(0).(models.Activity)
	}

	if rf, ok := ret.Get(1).(func(models.Activity, string, string, string) error); ok {
		r1 = rf(activity, userHandle, campaignId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityService_CreateActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateActivity'
type MockActivityService_CreateActivity_Call struct {
	*mock.Call
}

// CreateActivity is a helper method to define mock.On call
//   - activity models.Activity
//   - userHandle string
//   - campaignId string
//   - key string
func (_e *MockActivityService_Expecter) CreateActivity(activity interface{}, userHandle interface{}, campaignId interface{}, key interface{}) *MockActivityService_CreateActivity_Call {
	return &MockActivityService_CreateActivity_Call{Call: _e.mock.On("CreateActivity", activity, userHandle, campaignId, key)}
}

func (_c *MockActivityService_CreateActivity_Call) Run(run func(activity models.Activity, userHandle string, campaignId string, key string)) *MockActivityService_CreateActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Activity), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockActivityService_CreateActivity_Call) Return(_a0 models.Activity, _a1 error) *MockActivityService_CreateActivity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityService_CreateActivity_Call) RunAndReturn(run func(models.Activity, string, string, string) (models.Activity, error)) *MockActivityService_CreateActivity_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteActivityByID provides a mock function with given fields: activityID, campaignID, userHandle
func (_m *MockActivityService) DeleteActivityByID(activityID uint, campaignID string, userHandle string) error {
	ret := _m.Called(activityID, campaignID, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActivityByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, string) error); ok {
		r0 = rf(activityID, campaignID, userHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityService_DeleteActivityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteActivityByID'
type MockActivityService_DeleteActivityByID_Call struct {
	*mock.Call
}

// DeleteActivityByID is a helper method to define mock.On call
//   - activityID uint
//   - campaignID string
//   - userHandle string
func (_e *MockActivityService_Expecter) DeleteActivityByID(activityID interface{}, campaignID interface{}, userHandle interface{}) *MockActivityService_DeleteActivityByID_Call {
	return &MockActivityService_DeleteActivityByID_Call{Call: _e.mock.On("DeleteActivityByID", activityID, campaignID, userHandle)}
}

func (_c *MockActivityService_DeleteActivityByID_Call) Run(run func(activityID uint, campaignID string, userHandle string)) *MockActivityService_DeleteActivityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockActivityService_DeleteActivityByID_Call) Return(_a0 error) *MockActivityService_DeleteActivityByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityService_DeleteActivityByID_Call) RunAndReturn(run func(uint, string, string) error) *MockActivityService_DeleteActivityByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivitiesByCampaignID provides a mock function with given fields: campaignID
func (_m *MockActivityService) GetActivitiesByCampaignID(campaignID string) ([]models.Activity, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetActivitiesByCampaignID")
	}

	var r0 []models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Activity, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Activity); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityService_GetActivitiesByCampaignID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivitiesByCampaignID'
type MockActivityService_GetActivitiesByCampaignID_Call struct {
	*mock.Call
}

// GetActivitiesByCampaignID is a helper method to define mock.On call
//   - campaignID string
func (_e *MockActivityService_Expecter) GetActivitiesByCampaignID(campaignID interface{}) *MockActivityService_GetActivitiesByCampaignID_Call {
	return &MockActivityService_GetActivitiesByCampaignID_Call{Call: _e.mock.On("GetActivitiesByCampaignID", campaignID)}
}

func (_c *MockActivityService_GetActivitiesByCampaignID_Call) Run(run func(campaignID string)) *MockActivityService_GetActivitiesByCampaignID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockActivityService_GetActivitiesByCampaignID_Call) Return(_a0 []models.Activity, _a1 error) *MockActivityService_GetActivitiesByCampaignID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityService_GetActivitiesByCampaignID_Call) RunAndReturn(run func(string) ([]models.Activity, error)) *MockActivityService_GetActivitiesByCampaignID_Call {
	_c.Call.Return(run)
	return _c
}

// GetActivityByID provides a mock function with given fields: activityID, campaignID
func (_m *MockActivityService) GetActivityByID(activityID uint, campaignID string) (models.Activity, error) {
	ret := _m.Called(activityID, campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetActivityByID")
	}

	var r0 models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (models.Activity, error)); ok {
		return rf(activityID, campaignID)
	}
	if rf, ok := ret.Get(0).(func(uint, string) models.Activity); ok {
		r0 = rf(activityID, campaignID)
	} else {
		r0 = ret.Get(0).(models.Activity)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(activityID, campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityService_GetActivityByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActivityByID'
type MockActivityService_GetActivityByID_Call struct {
	*mock.Call
}

// GetActivityByID is a helper method to define mock.On call
//   - activityID uint
//   - campaignID string
func (_e *MockActivityService_Expecter) GetActivityByID(activityID interface{}, campaignID interface{}) *MockActivityService_GetActivityByID_Call {
	return &MockActivityService_GetActivityByID_Call{Call: _e.mock.On("GetActivityByID", activityID, campaignID)}
}

func (_c *MockActivityService_GetActivityByID_Call) Run(run func(activityID uint, campaignID string)) *MockActivityService_GetActivityByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockActivityService_GetActivityByID_Call) Return(_a0 models.Activity, _a1 error) *MockActivityService_GetActivityByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityService_GetActivityByID_Call) RunAndReturn(run func(uint, string) (models.Activity, error)) *MockActivityService_GetActivityByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetParticipants provides a mock function with given fields: activityID, campaignId, key
func (_m *MockActivityService) GetParticipants(activityID uint, campaignId string, key string) ([]models.Contributor, error) {
	ret := _m.Called(activityID, campaignId, key)

	if len(ret) == 0 {
		panic("no return value specified for GetParticipants")
	}

	var r0 []models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) ([]models.Contributor, error)); ok {
		return rf(activityID, campaignId, key)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) []models.Contributor); ok {
		r0 = rf(activityID, campaignId, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contributor)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(activityID, campaignId, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityService_GetParticipants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParticipants'
type MockActivityService_GetParticipants_Call struct {
	*mock.Call
}

// GetParticipants is a helper method to define mock.On call
//   - activityID uint
//   - campaignId string
//   - key string
func (_e *MockActivityService_Expecter) GetParticipants(activityID interface{}, campaignId interface{}, key interface{}) *MockActivityService_GetParticipants_Call {
	return &MockActivityService_GetParticipants_Call{Call: _e.mock.On("GetParticipants", activityID, campaignId, key)}
}

func (_c *MockActivityService_GetParticipants_Call) Run(run func(activityID uint, campaignId string, key string)) *MockActivityService_GetParticipants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockActivityService_GetParticipants_Call) Return(_a0 []models.Contributor, _a1 error) *MockActivityService_GetParticipants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityService_GetParticipants_Call) RunAndReturn(run func(uint, string, string) ([]models.Contributor, error)) *MockActivityService_GetParticipants_Call {
	_c.Call.Return(run)
	return _c
}

// OptInContributor provides a mock function with given fields: campaignID, userEmail, key, activityID, contributorID
func (_m *MockActivityService) OptInContributor(campaignID string, userEmail string, key string, activityID uint, contributorID uint) error {
	ret := _m.Called(campaignID, userEmail, key, activityID, contributorID)

	if len(ret) == 0 {
		panic("no return value specified for OptInContributor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, uint, uint) error); ok {
		r0 = rf(campaignID, userEmail, key, activityID, contributorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityService_OptInContributor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OptInContributor'
type MockActivityService_OptInContributor_Call struct {
	*mock.Call
}

// OptInContributor is a helper method to define mock.On call
//   - campaignID string
//   - userEmail string
//   - key string
//   - activityID uint
//   - contributorID uint
func (_e *MockActivityService_Expecter) OptInContributor(campaignID interface{}, userEmail interface{}, key interface{}, activityID interface{}, contributorID interface{}) *MockActivityService_OptInContributor_Call {
	return &MockActivityService_OptInContributor_Call{Call: _e.mock.On("OptInContributor", campaignID, userEmail, key, activityID, contributorID)}
}

func (_c *MockActivityService_OptInContributor_Call) Run(run func(campaignID string, userEmail string, key string, activityID uint, contributorID uint)) *MockActivityService_OptInContributor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(uint), args[4].(uint))
	})
	return _c
}

func (_c *MockActivityService_OptInContributor_Call) Return(_a0 error) *MockActivityService_OptInContributor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityService_OptInContributor_Call) RunAndReturn(run func(string, string, string, uint, uint) error) *MockActivityService_OptInContributor_Call {
	_c.Call.Return(run)
	return _c
}

// OptOutContributor provides a mock function with given fields: campaignID, userEmail, key, activityID, contributorID
func (_m *MockActivityService) OptOutContributor(campaignID string, userEmail string, key string, activityID uint, contributorID uint) error {
	ret := _m.Called(campaignID, userEmail, key, activityID, contributorID)

	if len(ret) == 0 {
		panic("no return value specified for OptOutContributor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, uint, uint) error); ok {
		r0 = rf(campaignID, userEmail, key, activityID, contributorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityService_OptOutContributor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OptOutContributor'
type MockActivityService_OptOutContributor_Call struct {
	*mock.Call
}

// OptOutContributor is a helper method to define mock.On call
//   - campaignID string
//   - userEmail string
//   - key string
//   - activityID uint
//   - contributorID uint
func (_e *MockActivityService_Expecter) OptOutContributor(campaignID interface{}, userEmail interface{}, key interface{}, activityID interface{}, contributorID interface{}) *MockActivityService_OptOutContributor_Call {
	return &MockActivityService_OptOutContributor_Call{Call: _e.mock.On("OptOutContributor", campaignID, userEmail, key, activityID, contributorID)}
}

func (_c *MockActivityService_OptOutContributor_Call) Run(run func(campaignID string, userEmail string, key string, activityID uint, contributorID uint)) *MockActivityService_OptOutContributor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(uint), args[4].(uint))
	})
	return _c
}

func (_c *MockActivityService_OptOutContributor_Call) Return(_a0 error) *MockActivityService_OptOutContributor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityService_OptOutContributor_Call) RunAndReturn(run func(string, string, string, uint, uint) error) *MockActivityService_OptOutContributor_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActivity provides a mock function with given fields: activity, userHandle
func (_m *MockActivityService) UpdateActivity(activity *models.Activity, userHandle string) error {
	ret := _m.Called(activity, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActivity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity, string) error); ok {
		r0 = rf(activity, userHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityService_UpdateActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActivity'
type MockActivityService_UpdateActivity_Call struct {
	*mock.Call
}

// UpdateActivity is a helper method to define mock.On call
//   - activity *models.Activity
//   - userHandle string
func (_e *MockActivityService_Expecter) UpdateActivity(activity interface{}, userHandle interface{}) *MockActivityService_UpdateActivity_Call {
	return &MockActivityService_UpdateActivity_Call{Call: _e.mock.On("UpdateActivity", activity, userHandle)}
}

func (_c *MockActivityService_UpdateActivity_Call) Run(run func(activity *models.Activity, userHandle string)) *MockActivityService_UpdateActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity), args[1].(string))
	})
	return _c
}

func (_c *MockActivityService_UpdateActivity_Call) Return(_a0 error) *MockActivityService_UpdateActivity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityService_UpdateActivity_Call) RunAndReturn(run func(*models.Activity, string) error) *MockActivityService_UpdateActivity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActivityService creates a new instance of MockActivityService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActivityService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActivityService {
	mock := &MockActivityService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
