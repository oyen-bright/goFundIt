// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	websocket "github.com/oyen-bright/goFundIt/pkg/websocket"
	mock "github.com/stretchr/testify/mock"
)

// MockEventBroadcaster is an autogenerated mock type for the EventBroadcaster type
type MockEventBroadcaster struct {
	mock.Mock
}

type MockEventBroadcaster_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBroadcaster) EXPECT() *MockEventBroadcaster_Expecter {
	return &MockEventBroadcaster_Expecter{mock: &_m.Mock}
}

// NewEvent provides a mock function with given fields: campaignID, eventType, data
func (_m *MockEventBroadcaster) NewEvent(campaignID string, eventType websocket.EventType, data interface{}) {
	_m.Called(campaignID, eventType, data)
}

// MockEventBroadcaster_NewEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewEvent'
type MockEventBroadcaster_NewEvent_Call struct {
	*mock.Call
}

// NewEvent is a helper method to define mock.On call
//   - campaignID string
//   - eventType websocket.EventType
//   - data interface{}
func (_e *MockEventBroadcaster_Expecter) NewEvent(campaignID interface{}, eventType interface{}, data interface{}) *MockEventBroadcaster_NewEvent_Call {
	return &MockEventBroadcaster_NewEvent_Call{Call: _e.mock.On("NewEvent", campaignID, eventType, data)}
}

func (_c *MockEventBroadcaster_NewEvent_Call) Run(run func(campaignID string, eventType websocket.EventType, data interface{})) *MockEventBroadcaster_NewEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(websocket.EventType), args[2].(interface{}))
	})
	return _c
}

func (_c *MockEventBroadcaster_NewEvent_Call) Return() *MockEventBroadcaster_NewEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventBroadcaster_NewEvent_Call) RunAndReturn(run func(string, websocket.EventType, interface{})) *MockEventBroadcaster_NewEvent_Call {
	_c.Run(run)
	return _c
}

// NewMockEventBroadcaster creates a new instance of MockEventBroadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBroadcaster(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBroadcaster {
	mock := &MockEventBroadcaster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
