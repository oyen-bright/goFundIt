// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import mock "github.com/stretchr/testify/mock"

// MockCronService is an autogenerated mock type for the CronService type
type MockCronService struct {
	mock.Mock
}

type MockCronService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCronService) EXPECT() *MockCronService_Expecter {
	return &MockCronService_Expecter{mock: &_m.Mock}
}

// StartCronJobs provides a mock function with no fields
func (_m *MockCronService) StartCronJobs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartCronJobs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCronService_StartCronJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartCronJobs'
type MockCronService_StartCronJobs_Call struct {
	*mock.Call
}

// StartCronJobs is a helper method to define mock.On call
func (_e *MockCronService_Expecter) StartCronJobs() *MockCronService_StartCronJobs_Call {
	return &MockCronService_StartCronJobs_Call{Call: _e.mock.On("StartCronJobs")}
}

func (_c *MockCronService_StartCronJobs_Call) Run(run func()) *MockCronService_StartCronJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCronService_StartCronJobs_Call) Return(_a0 error) *MockCronService_StartCronJobs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCronService_StartCronJobs_Call) RunAndReturn(run func() error) *MockCronService_StartCronJobs_Call {
	_c.Call.Return(run)
	return _c
}

// StopCronJobs provides a mock function with no fields
func (_m *MockCronService) StopCronJobs() {
	_m.Called()
}

// MockCronService_StopCronJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopCronJobs'
type MockCronService_StopCronJobs_Call struct {
	*mock.Call
}

// StopCronJobs is a helper method to define mock.On call
func (_e *MockCronService_Expecter) StopCronJobs() *MockCronService_StopCronJobs_Call {
	return &MockCronService_StopCronJobs_Call{Call: _e.mock.On("StopCronJobs")}
}

func (_c *MockCronService_StopCronJobs_Call) Run(run func()) *MockCronService_StopCronJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCronService_StopCronJobs_Call) Return() *MockCronService_StopCronJobs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCronService_StopCronJobs_Call) RunAndReturn(run func()) *MockCronService_StopCronJobs_Call {
	_c.Run(run)
	return _c
}

// NewMockCronService creates a new instance of MockCronService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCronService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCronService {
	mock := &MockCronService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
