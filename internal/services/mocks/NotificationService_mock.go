// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// NotifyActivityAddition provides a mock function with given fields: activity, campaign
func (_m *MockNotificationService) NotifyActivityAddition(activity *models.Activity, campaign *models.Campaign) error {
	ret := _m.Called(activity, campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyActivityAddition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity, *models.Campaign) error); ok {
		r0 = rf(activity, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyActivityAddition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyActivityAddition'
type MockNotificationService_NotifyActivityAddition_Call struct {
	*mock.Call
}

// NotifyActivityAddition is a helper method to define mock.On call
//   - activity *models.Activity
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyActivityAddition(activity interface{}, campaign interface{}) *MockNotificationService_NotifyActivityAddition_Call {
	return &MockNotificationService_NotifyActivityAddition_Call{Call: _e.mock.On("NotifyActivityAddition", activity, campaign)}
}

func (_c *MockNotificationService_NotifyActivityAddition_Call) Run(run func(activity *models.Activity, campaign *models.Campaign)) *MockNotificationService_NotifyActivityAddition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyActivityAddition_Call) Return(_a0 error) *MockNotificationService_NotifyActivityAddition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyActivityAddition_Call) RunAndReturn(run func(*models.Activity, *models.Campaign) error) *MockNotificationService_NotifyActivityAddition_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyActivityApprovalRequest provides a mock function with given fields: activity, campaign
func (_m *MockNotificationService) NotifyActivityApprovalRequest(activity *models.Activity, campaign *models.Campaign) error {
	ret := _m.Called(activity, campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyActivityApprovalRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity, *models.Campaign) error); ok {
		r0 = rf(activity, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyActivityApprovalRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyActivityApprovalRequest'
type MockNotificationService_NotifyActivityApprovalRequest_Call struct {
	*mock.Call
}

// NotifyActivityApprovalRequest is a helper method to define mock.On call
//   - activity *models.Activity
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyActivityApprovalRequest(activity interface{}, campaign interface{}) *MockNotificationService_NotifyActivityApprovalRequest_Call {
	return &MockNotificationService_NotifyActivityApprovalRequest_Call{Call: _e.mock.On("NotifyActivityApprovalRequest", activity, campaign)}
}

func (_c *MockNotificationService_NotifyActivityApprovalRequest_Call) Run(run func(activity *models.Activity, campaign *models.Campaign)) *MockNotificationService_NotifyActivityApprovalRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyActivityApprovalRequest_Call) Return(_a0 error) *MockNotificationService_NotifyActivityApprovalRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyActivityApprovalRequest_Call) RunAndReturn(run func(*models.Activity, *models.Campaign) error) *MockNotificationService_NotifyActivityApprovalRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyActivityApproved provides a mock function with given fields: activity, campaign
func (_m *MockNotificationService) NotifyActivityApproved(activity *models.Activity, campaign *models.Campaign) error {
	ret := _m.Called(activity, campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyActivityApproved")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity, *models.Campaign) error); ok {
		r0 = rf(activity, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyActivityApproved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyActivityApproved'
type MockNotificationService_NotifyActivityApproved_Call struct {
	*mock.Call
}

// NotifyActivityApproved is a helper method to define mock.On call
//   - activity *models.Activity
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyActivityApproved(activity interface{}, campaign interface{}) *MockNotificationService_NotifyActivityApproved_Call {
	return &MockNotificationService_NotifyActivityApproved_Call{Call: _e.mock.On("NotifyActivityApproved", activity, campaign)}
}

func (_c *MockNotificationService_NotifyActivityApproved_Call) Run(run func(activity *models.Activity, campaign *models.Campaign)) *MockNotificationService_NotifyActivityApproved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyActivityApproved_Call) Return(_a0 error) *MockNotificationService_NotifyActivityApproved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyActivityApproved_Call) RunAndReturn(run func(*models.Activity, *models.Campaign) error) *MockNotificationService_NotifyActivityApproved_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyActivityUpdate provides a mock function with given fields: activity, campaign
func (_m *MockNotificationService) NotifyActivityUpdate(activity *models.Activity, campaign *models.Campaign) error {
	ret := _m.Called(activity, campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyActivityUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity, *models.Campaign) error); ok {
		r0 = rf(activity, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyActivityUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyActivityUpdate'
type MockNotificationService_NotifyActivityUpdate_Call struct {
	*mock.Call
}

// NotifyActivityUpdate is a helper method to define mock.On call
//   - activity *models.Activity
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyActivityUpdate(activity interface{}, campaign interface{}) *MockNotificationService_NotifyActivityUpdate_Call {
	return &MockNotificationService_NotifyActivityUpdate_Call{Call: _e.mock.On("NotifyActivityUpdate", activity, campaign)}
}

func (_c *MockNotificationService_NotifyActivityUpdate_Call) Run(run func(activity *models.Activity, campaign *models.Campaign)) *MockNotificationService_NotifyActivityUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyActivityUpdate_Call) Return(_a0 error) *MockNotificationService_NotifyActivityUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyActivityUpdate_Call) RunAndReturn(run func(*models.Activity, *models.Campaign) error) *MockNotificationService_NotifyActivityUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCampaignCleanUp provides a mock function with given fields: campaign, data
func (_m *MockNotificationService) NotifyCampaignCleanUp(campaign *models.Campaign, data string) error {
	ret := _m.Called(campaign, data)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCampaignCleanUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, string) error); ok {
		r0 = rf(campaign, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyCampaignCleanUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCampaignCleanUp'
type MockNotificationService_NotifyCampaignCleanUp_Call struct {
	*mock.Call
}

// NotifyCampaignCleanUp is a helper method to define mock.On call
//   - campaign *models.Campaign
//   - data string
func (_e *MockNotificationService_Expecter) NotifyCampaignCleanUp(campaign interface{}, data interface{}) *MockNotificationService_NotifyCampaignCleanUp_Call {
	return &MockNotificationService_NotifyCampaignCleanUp_Call{Call: _e.mock.On("NotifyCampaignCleanUp", campaign, data)}
}

func (_c *MockNotificationService_NotifyCampaignCleanUp_Call) Run(run func(campaign *models.Campaign, data string)) *MockNotificationService_NotifyCampaignCleanUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationService_NotifyCampaignCleanUp_Call) Return(_a0 error) *MockNotificationService_NotifyCampaignCleanUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyCampaignCleanUp_Call) RunAndReturn(run func(*models.Campaign, string) error) *MockNotificationService_NotifyCampaignCleanUp_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCampaignCreation provides a mock function with given fields: campaign
func (_m *MockNotificationService) NotifyCampaignCreation(campaign *models.Campaign) error {
	ret := _m.Called(campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCampaignCreation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign) error); ok {
		r0 = rf(campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyCampaignCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCampaignCreation'
type MockNotificationService_NotifyCampaignCreation_Call struct {
	*mock.Call
}

// NotifyCampaignCreation is a helper method to define mock.On call
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyCampaignCreation(campaign interface{}) *MockNotificationService_NotifyCampaignCreation_Call {
	return &MockNotificationService_NotifyCampaignCreation_Call{Call: _e.mock.On("NotifyCampaignCreation", campaign)}
}

func (_c *MockNotificationService_NotifyCampaignCreation_Call) Run(run func(campaign *models.Campaign)) *MockNotificationService_NotifyCampaignCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyCampaignCreation_Call) Return(_a0 error) *MockNotificationService_NotifyCampaignCreation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyCampaignCreation_Call) RunAndReturn(run func(*models.Campaign) error) *MockNotificationService_NotifyCampaignCreation_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCampaignMilestone provides a mock function with given fields: campaign, milestoneType
func (_m *MockNotificationService) NotifyCampaignMilestone(campaign *models.Campaign, milestoneType string) error {
	ret := _m.Called(campaign, milestoneType)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCampaignMilestone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, string) error); ok {
		r0 = rf(campaign, milestoneType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyCampaignMilestone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCampaignMilestone'
type MockNotificationService_NotifyCampaignMilestone_Call struct {
	*mock.Call
}

// NotifyCampaignMilestone is a helper method to define mock.On call
//   - campaign *models.Campaign
//   - milestoneType string
func (_e *MockNotificationService_Expecter) NotifyCampaignMilestone(campaign interface{}, milestoneType interface{}) *MockNotificationService_NotifyCampaignMilestone_Call {
	return &MockNotificationService_NotifyCampaignMilestone_Call{Call: _e.mock.On("NotifyCampaignMilestone", campaign, milestoneType)}
}

func (_c *MockNotificationService_NotifyCampaignMilestone_Call) Run(run func(campaign *models.Campaign, milestoneType string)) *MockNotificationService_NotifyCampaignMilestone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationService_NotifyCampaignMilestone_Call) Return(_a0 error) *MockNotificationService_NotifyCampaignMilestone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyCampaignMilestone_Call) RunAndReturn(run func(*models.Campaign, string) error) *MockNotificationService_NotifyCampaignMilestone_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCampaignPayoutRequired provides a mock function with given fields: campaign
func (_m *MockNotificationService) NotifyCampaignPayoutRequired(campaign *models.Campaign) error {
	ret := _m.Called(campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCampaignPayoutRequired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign) error); ok {
		r0 = rf(campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyCampaignPayoutRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCampaignPayoutRequired'
type MockNotificationService_NotifyCampaignPayoutRequired_Call struct {
	*mock.Call
}

// NotifyCampaignPayoutRequired is a helper method to define mock.On call
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyCampaignPayoutRequired(campaign interface{}) *MockNotificationService_NotifyCampaignPayoutRequired_Call {
	return &MockNotificationService_NotifyCampaignPayoutRequired_Call{Call: _e.mock.On("NotifyCampaignPayoutRequired", campaign)}
}

func (_c *MockNotificationService_NotifyCampaignPayoutRequired_Call) Run(run func(campaign *models.Campaign)) *MockNotificationService_NotifyCampaignPayoutRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyCampaignPayoutRequired_Call) Return(_a0 error) *MockNotificationService_NotifyCampaignPayoutRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyCampaignPayoutRequired_Call) RunAndReturn(run func(*models.Campaign) error) *MockNotificationService_NotifyCampaignPayoutRequired_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCampaignUpdate provides a mock function with given fields: campaign, updateType
func (_m *MockNotificationService) NotifyCampaignUpdate(campaign *models.Campaign, updateType string) error {
	ret := _m.Called(campaign, updateType)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCampaignUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign, string) error); ok {
		r0 = rf(campaign, updateType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyCampaignUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCampaignUpdate'
type MockNotificationService_NotifyCampaignUpdate_Call struct {
	*mock.Call
}

// NotifyCampaignUpdate is a helper method to define mock.On call
//   - campaign *models.Campaign
//   - updateType string
func (_e *MockNotificationService_Expecter) NotifyCampaignUpdate(campaign interface{}, updateType interface{}) *MockNotificationService_NotifyCampaignUpdate_Call {
	return &MockNotificationService_NotifyCampaignUpdate_Call{Call: _e.mock.On("NotifyCampaignUpdate", campaign, updateType)}
}

func (_c *MockNotificationService_NotifyCampaignUpdate_Call) Run(run func(campaign *models.Campaign, updateType string)) *MockNotificationService_NotifyCampaignUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationService_NotifyCampaignUpdate_Call) Return(_a0 error) *MockNotificationService_NotifyCampaignUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyCampaignUpdate_Call) RunAndReturn(run func(*models.Campaign, string) error) *MockNotificationService_NotifyCampaignUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyCommentAddition provides a mock function with given fields: comment, activityID
func (_m *MockNotificationService) NotifyCommentAddition(comment *models.Comment, activityID *models.Activity) error {
	ret := _m.Called(comment, activityID)

	if len(ret) == 0 {
		panic("no return value specified for NotifyCommentAddition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Comment, *models.Activity) error); ok {
		r0 = rf(comment, activityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyCommentAddition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyCommentAddition'
type MockNotificationService_NotifyCommentAddition_Call struct {
	*mock.Call
}

// NotifyCommentAddition is a helper method to define mock.On call
//   - comment *models.Comment
//   - activityID *models.Activity
func (_e *MockNotificationService_Expecter) NotifyCommentAddition(comment interface{}, activityID interface{}) *MockNotificationService_NotifyCommentAddition_Call {
	return &MockNotificationService_NotifyCommentAddition_Call{Call: _e.mock.On("NotifyCommentAddition", comment, activityID)}
}

func (_c *MockNotificationService_NotifyCommentAddition_Call) Run(run func(comment *models.Comment, activityID *models.Activity)) *MockNotificationService_NotifyCommentAddition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Comment), args[1].(*models.Activity))
	})
	return _c
}

func (_c *MockNotificationService_NotifyCommentAddition_Call) Return(_a0 error) *MockNotificationService_NotifyCommentAddition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyCommentAddition_Call) RunAndReturn(run func(*models.Comment, *models.Activity) error) *MockNotificationService_NotifyCommentAddition_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyContributorAdded provides a mock function with given fields: contributor, campaign
func (_m *MockNotificationService) NotifyContributorAdded(contributor *models.Contributor, campaign *models.Campaign) error {
	ret := _m.Called(contributor, campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyContributorAdded")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor, *models.Campaign) error); ok {
		r0 = rf(contributor, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyContributorAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyContributorAdded'
type MockNotificationService_NotifyContributorAdded_Call struct {
	*mock.Call
}

// NotifyContributorAdded is a helper method to define mock.On call
//   - contributor *models.Contributor
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyContributorAdded(contributor interface{}, campaign interface{}) *MockNotificationService_NotifyContributorAdded_Call {
	return &MockNotificationService_NotifyContributorAdded_Call{Call: _e.mock.On("NotifyContributorAdded", contributor, campaign)}
}

func (_c *MockNotificationService_NotifyContributorAdded_Call) Run(run func(contributor *models.Contributor, campaign *models.Campaign)) *MockNotificationService_NotifyContributorAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Contributor), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyContributorAdded_Call) Return(_a0 error) *MockNotificationService_NotifyContributorAdded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyContributorAdded_Call) RunAndReturn(run func(*models.Contributor, *models.Campaign) error) *MockNotificationService_NotifyContributorAdded_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyPaymentReceived provides a mock function with given fields: contributor, campaign
func (_m *MockNotificationService) NotifyPaymentReceived(contributor *models.Contributor, campaign *models.Campaign) error {
	ret := _m.Called(contributor, campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyPaymentReceived")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor, *models.Campaign) error); ok {
		r0 = rf(contributor, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyPaymentReceived_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyPaymentReceived'
type MockNotificationService_NotifyPaymentReceived_Call struct {
	*mock.Call
}

// NotifyPaymentReceived is a helper method to define mock.On call
//   - contributor *models.Contributor
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyPaymentReceived(contributor interface{}, campaign interface{}) *MockNotificationService_NotifyPaymentReceived_Call {
	return &MockNotificationService_NotifyPaymentReceived_Call{Call: _e.mock.On("NotifyPaymentReceived", contributor, campaign)}
}

func (_c *MockNotificationService_NotifyPaymentReceived_Call) Run(run func(contributor *models.Contributor, campaign *models.Campaign)) *MockNotificationService_NotifyPaymentReceived_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Contributor), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyPaymentReceived_Call) Return(_a0 error) *MockNotificationService_NotifyPaymentReceived_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyPaymentReceived_Call) RunAndReturn(run func(*models.Contributor, *models.Campaign) error) *MockNotificationService_NotifyPaymentReceived_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyPayoutCollected provides a mock function with given fields: campaign
func (_m *MockNotificationService) NotifyPayoutCollected(campaign *models.Campaign) error {
	ret := _m.Called(campaign)

	if len(ret) == 0 {
		panic("no return value specified for NotifyPayoutCollected")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign) error); ok {
		r0 = rf(campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_NotifyPayoutCollected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyPayoutCollected'
type MockNotificationService_NotifyPayoutCollected_Call struct {
	*mock.Call
}

// NotifyPayoutCollected is a helper method to define mock.On call
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) NotifyPayoutCollected(campaign interface{}) *MockNotificationService_NotifyPayoutCollected_Call {
	return &MockNotificationService_NotifyPayoutCollected_Call{Call: _e.mock.On("NotifyPayoutCollected", campaign)}
}

func (_c *MockNotificationService_NotifyPayoutCollected_Call) Run(run func(campaign *models.Campaign)) *MockNotificationService_NotifyPayoutCollected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_NotifyPayoutCollected_Call) Return(_a0 error) *MockNotificationService_NotifyPayoutCollected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_NotifyPayoutCollected_Call) RunAndReturn(run func(*models.Campaign) error) *MockNotificationService_NotifyPayoutCollected_Call {
	_c.Call.Return(run)
	return _c
}

// SendContributionReminder provides a mock function with given fields: contributor, campaign
func (_m *MockNotificationService) SendContributionReminder(contributor *models.Contributor, campaign *models.Campaign) error {
	ret := _m.Called(contributor, campaign)

	if len(ret) == 0 {
		panic("no return value specified for SendContributionReminder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor, *models.Campaign) error); ok {
		r0 = rf(contributor, campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_SendContributionReminder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendContributionReminder'
type MockNotificationService_SendContributionReminder_Call struct {
	*mock.Call
}

// SendContributionReminder is a helper method to define mock.On call
//   - contributor *models.Contributor
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) SendContributionReminder(contributor interface{}, campaign interface{}) *MockNotificationService_SendContributionReminder_Call {
	return &MockNotificationService_SendContributionReminder_Call{Call: _e.mock.On("SendContributionReminder", contributor, campaign)}
}

func (_c *MockNotificationService_SendContributionReminder_Call) Run(run func(contributor *models.Contributor, campaign *models.Campaign)) *MockNotificationService_SendContributionReminder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Contributor), args[1].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_SendContributionReminder_Call) Return(_a0 error) *MockNotificationService_SendContributionReminder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_SendContributionReminder_Call) RunAndReturn(run func(*models.Contributor, *models.Campaign) error) *MockNotificationService_SendContributionReminder_Call {
	_c.Call.Return(run)
	return _c
}

// SendDeadlineReminder provides a mock function with given fields: campaign
func (_m *MockNotificationService) SendDeadlineReminder(campaign *models.Campaign) error {
	ret := _m.Called(campaign)

	if len(ret) == 0 {
		panic("no return value specified for SendDeadlineReminder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Campaign) error); ok {
		r0 = rf(campaign)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_SendDeadlineReminder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendDeadlineReminder'
type MockNotificationService_SendDeadlineReminder_Call struct {
	*mock.Call
}

// SendDeadlineReminder is a helper method to define mock.On call
//   - campaign *models.Campaign
func (_e *MockNotificationService_Expecter) SendDeadlineReminder(campaign interface{}) *MockNotificationService_SendDeadlineReminder_Call {
	return &MockNotificationService_SendDeadlineReminder_Call{Call: _e.mock.On("SendDeadlineReminder", campaign)}
}

func (_c *MockNotificationService_SendDeadlineReminder_Call) Run(run func(campaign *models.Campaign)) *MockNotificationService_SendDeadlineReminder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign))
	})
	return _c
}

func (_c *MockNotificationService_SendDeadlineReminder_Call) Return(_a0 error) *MockNotificationService_SendDeadlineReminder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_SendDeadlineReminder_Call) RunAndReturn(run func(*models.Campaign) error) *MockNotificationService_SendDeadlineReminder_Call {
	_c.Call.Return(run)
	return _c
}

// SendSystemNotification provides a mock function with given fields: notificationType, message
func (_m *MockNotificationService) SendSystemNotification(notificationType string, message string) error {
	ret := _m.Called(notificationType, message)

	if len(ret) == 0 {
		panic("no return value specified for SendSystemNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(notificationType, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationService_SendSystemNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSystemNotification'
type MockNotificationService_SendSystemNotification_Call struct {
	*mock.Call
}

// SendSystemNotification is a helper method to define mock.On call
//   - notificationType string
//   - message string
func (_e *MockNotificationService_Expecter) SendSystemNotification(notificationType interface{}, message interface{}) *MockNotificationService_SendSystemNotification_Call {
	return &MockNotificationService_SendSystemNotification_Call{Call: _e.mock.On("SendSystemNotification", notificationType, message)}
}

func (_c *MockNotificationService_SendSystemNotification_Call) Run(run func(notificationType string, message string)) *MockNotificationService_SendSystemNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationService_SendSystemNotification_Call) Return(_a0 error) *MockNotificationService_SendSystemNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationService_SendSystemNotification_Call) RunAndReturn(run func(string, string) error) *MockNotificationService_SendSystemNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
