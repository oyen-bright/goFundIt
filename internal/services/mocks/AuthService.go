// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *AuthService) CreateUser(_a0 models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUsers provides a mock function with given fields: users
func (_m *AuthService) CreateUsers(users []models.User) ([]models.User, error) {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.User) ([]models.User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]models.User) []models.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: handle
func (_m *AuthService) DeleteUser(handle string) error {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindNonExistingUsers provides a mock function with given fields: users
func (_m *AuthService) FindNonExistingUsers(users []models.User) ([]models.User, error) {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for FindNonExistingUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.User) ([]models.User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]models.User) []models.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: _a0
func (_m *AuthService) GenerateToken(_a0 models.User) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.User) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByHandle provides a mock function with given fields: handle
func (_m *AuthService) GetUserByHandle(handle string) (models.User, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByHandle")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestAuth provides a mock function with given fields: _a0, _a1
func (_m *AuthService) RequestAuth(_a0 string, _a1 string) (models.Otp, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RequestAuth")
	}

	var r0 models.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Otp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Otp); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Otp)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *AuthService) UpdateUser(_a0 models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyAuth provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) VerifyAuth(_a0 string, _a1 string, _a2 string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAuth")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
