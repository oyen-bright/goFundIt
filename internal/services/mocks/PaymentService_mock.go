// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	paystack "github.com/oyen-bright/goFundIt/pkg/paystack"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentService is an autogenerated mock type for the PaymentService type
type MockPaymentService struct {
	mock.Mock
}

type MockPaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentService) EXPECT() *MockPaymentService_Expecter {
	return &MockPaymentService_Expecter{mock: &_m.Mock}
}

// DeletePayment provides a mock function with given fields: payment
func (_m *MockPaymentService) DeletePayment(payment models.Payment) error {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for DeletePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Payment) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentService_DeletePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePayment'
type MockPaymentService_DeletePayment_Call struct {
	*mock.Call
}

// DeletePayment is a helper method to define mock.On call
//   - payment models.Payment
func (_e *MockPaymentService_Expecter) DeletePayment(payment interface{}) *MockPaymentService_DeletePayment_Call {
	return &MockPaymentService_DeletePayment_Call{Call: _e.mock.On("DeletePayment", payment)}
}

func (_c *MockPaymentService_DeletePayment_Call) Run(run func(payment models.Payment)) *MockPaymentService_DeletePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Payment))
	})
	return _c
}

func (_c *MockPaymentService_DeletePayment_Call) Return(_a0 error) *MockPaymentService_DeletePayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentService_DeletePayment_Call) RunAndReturn(run func(models.Payment) error) *MockPaymentService_DeletePayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByReference provides a mock function with given fields: reference
func (_m *MockPaymentService) GetPaymentByReference(reference string) (*models.Payment, error) {
	ret := _m.Called(reference)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByReference")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Payment, error)); ok {
		return rf(reference)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Payment); ok {
		r0 = rf(reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentService_GetPaymentByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByReference'
type MockPaymentService_GetPaymentByReference_Call struct {
	*mock.Call
}

// GetPaymentByReference is a helper method to define mock.On call
//   - reference string
func (_e *MockPaymentService_Expecter) GetPaymentByReference(reference interface{}) *MockPaymentService_GetPaymentByReference_Call {
	return &MockPaymentService_GetPaymentByReference_Call{Call: _e.mock.On("GetPaymentByReference", reference)}
}

func (_c *MockPaymentService_GetPaymentByReference_Call) Run(run func(reference string)) *MockPaymentService_GetPaymentByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPaymentService_GetPaymentByReference_Call) Return(_a0 *models.Payment, _a1 error) *MockPaymentService_GetPaymentByReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_GetPaymentByReference_Call) RunAndReturn(run func(string) (*models.Payment, error)) *MockPaymentService_GetPaymentByReference_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentsByCampaign provides a mock function with given fields: campaignID, limit, offset
func (_m *MockPaymentService) GetPaymentsByCampaign(campaignID string, limit int, offset int) ([]*models.Payment, int64, error) {
	ret := _m.Called(campaignID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentsByCampaign")
	}

	var r0 []*models.Payment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*models.Payment, int64, error)); ok {
		return rf(campaignID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*models.Payment); ok {
		r0 = rf(campaignID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(campaignID, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(campaignID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPaymentService_GetPaymentsByCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentsByCampaign'
type MockPaymentService_GetPaymentsByCampaign_Call struct {
	*mock.Call
}

// GetPaymentsByCampaign is a helper method to define mock.On call
//   - campaignID string
//   - limit int
//   - offset int
func (_e *MockPaymentService_Expecter) GetPaymentsByCampaign(campaignID interface{}, limit interface{}, offset interface{}) *MockPaymentService_GetPaymentsByCampaign_Call {
	return &MockPaymentService_GetPaymentsByCampaign_Call{Call: _e.mock.On("GetPaymentsByCampaign", campaignID, limit, offset)}
}

func (_c *MockPaymentService_GetPaymentsByCampaign_Call) Run(run func(campaignID string, limit int, offset int)) *MockPaymentService_GetPaymentsByCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPaymentService_GetPaymentsByCampaign_Call) Return(_a0 []*models.Payment, _a1 int64, _a2 error) *MockPaymentService_GetPaymentsByCampaign_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPaymentService_GetPaymentsByCampaign_Call) RunAndReturn(run func(string, int, int) ([]*models.Payment, int64, error)) *MockPaymentService_GetPaymentsByCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentsByContributor provides a mock function with given fields: contributorID, limit, offset
func (_m *MockPaymentService) GetPaymentsByContributor(contributorID uint, limit int, offset int) ([]models.Payment, int64, error) {
	ret := _m.Called(contributorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentsByContributor")
	}

	var r0 []models.Payment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]models.Payment, int64, error)); ok {
		return rf(contributorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []models.Payment); ok {
		r0 = rf(contributorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int64); ok {
		r1 = rf(contributorID, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(contributorID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPaymentService_GetPaymentsByContributor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentsByContributor'
type MockPaymentService_GetPaymentsByContributor_Call struct {
	*mock.Call
}

// GetPaymentsByContributor is a helper method to define mock.On call
//   - contributorID uint
//   - limit int
//   - offset int
func (_e *MockPaymentService_Expecter) GetPaymentsByContributor(contributorID interface{}, limit interface{}, offset interface{}) *MockPaymentService_GetPaymentsByContributor_Call {
	return &MockPaymentService_GetPaymentsByContributor_Call{Call: _e.mock.On("GetPaymentsByContributor", contributorID, limit, offset)}
}

func (_c *MockPaymentService_GetPaymentsByContributor_Call) Run(run func(contributorID uint, limit int, offset int)) *MockPaymentService_GetPaymentsByContributor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPaymentService_GetPaymentsByContributor_Call) Return(_a0 []models.Payment, _a1 int64, _a2 error) *MockPaymentService_GetPaymentsByContributor_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPaymentService_GetPaymentsByContributor_Call) RunAndReturn(run func(uint, int, int) ([]models.Payment, int64, error)) *MockPaymentService_GetPaymentsByContributor_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeManualPayment provides a mock function with given fields: contributorID, reference, userEmail, key
func (_m *MockPaymentService) InitializeManualPayment(contributorID uint, reference string, userEmail string, key string) (*models.Payment, error) {
	ret := _m.Called(contributorID, reference, userEmail, key)

	if len(ret) == 0 {
		panic("no return value specified for InitializeManualPayment")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string, string) (*models.Payment, error)); ok {
		return rf(contributorID, reference, userEmail, key)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string, string) *models.Payment); ok {
		r0 = rf(contributorID, reference, userEmail, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, string, string) error); ok {
		r1 = rf(contributorID, reference, userEmail, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentService_InitializeManualPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeManualPayment'
type MockPaymentService_InitializeManualPayment_Call struct {
	*mock.Call
}

// InitializeManualPayment is a helper method to define mock.On call
//   - contributorID uint
//   - reference string
//   - userEmail string
//   - key string
func (_e *MockPaymentService_Expecter) InitializeManualPayment(contributorID interface{}, reference interface{}, userEmail interface{}, key interface{}) *MockPaymentService_InitializeManualPayment_Call {
	return &MockPaymentService_InitializeManualPayment_Call{Call: _e.mock.On("InitializeManualPayment", contributorID, reference, userEmail, key)}
}

func (_c *MockPaymentService_InitializeManualPayment_Call) Run(run func(contributorID uint, reference string, userEmail string, key string)) *MockPaymentService_InitializeManualPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPaymentService_InitializeManualPayment_Call) Return(_a0 *models.Payment, _a1 error) *MockPaymentService_InitializeManualPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_InitializeManualPayment_Call) RunAndReturn(run func(uint, string, string, string) (*models.Payment, error)) *MockPaymentService_InitializeManualPayment_Call {
	_c.Call.Return(run)
	return _c
}

// InitializePayment provides a mock function with given fields: contributorID, key
func (_m *MockPaymentService) InitializePayment(contributorID uint, key string) (*models.Payment, error) {
	ret := _m.Called(contributorID, key)

	if len(ret) == 0 {
		panic("no return value specified for InitializePayment")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (*models.Payment, error)); ok {
		return rf(contributorID, key)
	}
	if rf, ok := ret.Get(0).(func(uint, string) *models.Payment); ok {
		r0 = rf(contributorID, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(contributorID, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentService_InitializePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializePayment'
type MockPaymentService_InitializePayment_Call struct {
	*mock.Call
}

// InitializePayment is a helper method to define mock.On call
//   - contributorID uint
//   - key string
func (_e *MockPaymentService_Expecter) InitializePayment(contributorID interface{}, key interface{}) *MockPaymentService_InitializePayment_Call {
	return &MockPaymentService_InitializePayment_Call{Call: _e.mock.On("InitializePayment", contributorID, key)}
}

func (_c *MockPaymentService_InitializePayment_Call) Run(run func(contributorID uint, key string)) *MockPaymentService_InitializePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_InitializePayment_Call) Return(_a0 *models.Payment, _a1 error) *MockPaymentService_InitializePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_InitializePayment_Call) RunAndReturn(run func(uint, string) (*models.Payment, error)) *MockPaymentService_InitializePayment_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessPaystackWebhook provides a mock function with given fields: event
func (_m *MockPaymentService) ProcessPaystackWebhook(event paystack.PaystackWebhookEvent) {
	_m.Called(event)
}

// MockPaymentService_ProcessPaystackWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPaystackWebhook'
type MockPaymentService_ProcessPaystackWebhook_Call struct {
	*mock.Call
}

// ProcessPaystackWebhook is a helper method to define mock.On call
//   - event paystack.PaystackWebhookEvent
func (_e *MockPaymentService_Expecter) ProcessPaystackWebhook(event interface{}) *MockPaymentService_ProcessPaystackWebhook_Call {
	return &MockPaymentService_ProcessPaystackWebhook_Call{Call: _e.mock.On("ProcessPaystackWebhook", event)}
}

func (_c *MockPaymentService_ProcessPaystackWebhook_Call) Run(run func(event paystack.PaystackWebhookEvent)) *MockPaymentService_ProcessPaystackWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(paystack.PaystackWebhookEvent))
	})
	return _c
}

func (_c *MockPaymentService_ProcessPaystackWebhook_Call) Return() *MockPaymentService_ProcessPaystackWebhook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPaymentService_ProcessPaystackWebhook_Call) RunAndReturn(run func(paystack.PaystackWebhookEvent)) *MockPaymentService_ProcessPaystackWebhook_Call {
	_c.Run(run)
	return _c
}

// VerifyManualPayment provides a mock function with given fields: reference, userHandle, key
func (_m *MockPaymentService) VerifyManualPayment(reference string, userHandle string, key string) error {
	ret := _m.Called(reference, userHandle, key)

	if len(ret) == 0 {
		panic("no return value specified for VerifyManualPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(reference, userHandle, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentService_VerifyManualPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyManualPayment'
type MockPaymentService_VerifyManualPayment_Call struct {
	*mock.Call
}

// VerifyManualPayment is a helper method to define mock.On call
//   - reference string
//   - userHandle string
//   - key string
func (_e *MockPaymentService_Expecter) VerifyManualPayment(reference interface{}, userHandle interface{}, key interface{}) *MockPaymentService_VerifyManualPayment_Call {
	return &MockPaymentService_VerifyManualPayment_Call{Call: _e.mock.On("VerifyManualPayment", reference, userHandle, key)}
}

func (_c *MockPaymentService_VerifyManualPayment_Call) Run(run func(reference string, userHandle string, key string)) *MockPaymentService_VerifyManualPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPaymentService_VerifyManualPayment_Call) Return(_a0 error) *MockPaymentService_VerifyManualPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentService_VerifyManualPayment_Call) RunAndReturn(run func(string, string, string) error) *MockPaymentService_VerifyManualPayment_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPayment provides a mock function with given fields: reference
func (_m *MockPaymentService) VerifyPayment(reference string) error {
	ret := _m.Called(reference)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(reference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentService_VerifyPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPayment'
type MockPaymentService_VerifyPayment_Call struct {
	*mock.Call
}

// VerifyPayment is a helper method to define mock.On call
//   - reference string
func (_e *MockPaymentService_Expecter) VerifyPayment(reference interface{}) *MockPaymentService_VerifyPayment_Call {
	return &MockPaymentService_VerifyPayment_Call{Call: _e.mock.On("VerifyPayment", reference)}
}

func (_c *MockPaymentService_VerifyPayment_Call) Run(run func(reference string)) *MockPaymentService_VerifyPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPaymentService_VerifyPayment_Call) Return(_a0 error) *MockPaymentService_VerifyPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentService_VerifyPayment_Call) RunAndReturn(run func(string) error) *MockPaymentService_VerifyPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentService creates a new instance of MockPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentService {
	mock := &MockPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
