// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	dto "github.com/oyen-bright/goFundIt/internal/api/dto/payout"

	mock "github.com/stretchr/testify/mock"

	models "github.com/oyen-bright/goFundIt/internal/models"
)

// MockPayoutService is an autogenerated mock type for the PayoutService type
type MockPayoutService struct {
	mock.Mock
}

type MockPayoutService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayoutService) EXPECT() *MockPayoutService_Expecter {
	return &MockPayoutService_Expecter{mock: &_m.Mock}
}

// GetBankList provides a mock function with no fields
func (_m *MockPayoutService) GetBankList() ([]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBankList")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutService_GetBankList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBankList'
type MockPayoutService_GetBankList_Call struct {
	*mock.Call
}

// GetBankList is a helper method to define mock.On call
func (_e *MockPayoutService_Expecter) GetBankList() *MockPayoutService_GetBankList_Call {
	return &MockPayoutService_GetBankList_Call{Call: _e.mock.On("GetBankList")}
}

func (_c *MockPayoutService_GetBankList_Call) Run(run func()) *MockPayoutService_GetBankList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPayoutService_GetBankList_Call) Return(_a0 []interface{}, _a1 error) *MockPayoutService_GetBankList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutService_GetBankList_Call) RunAndReturn(run func() ([]interface{}, error)) *MockPayoutService_GetBankList_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayoutByCampaignID provides a mock function with given fields: campaignID
func (_m *MockPayoutService) GetPayoutByCampaignID(campaignID string) (*models.Payout, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayoutByCampaignID")
	}

	var r0 *models.Payout
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Payout, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Payout); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payout)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutService_GetPayoutByCampaignID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayoutByCampaignID'
type MockPayoutService_GetPayoutByCampaignID_Call struct {
	*mock.Call
}

// GetPayoutByCampaignID is a helper method to define mock.On call
//   - campaignID string
func (_e *MockPayoutService_Expecter) GetPayoutByCampaignID(campaignID interface{}) *MockPayoutService_GetPayoutByCampaignID_Call {
	return &MockPayoutService_GetPayoutByCampaignID_Call{Call: _e.mock.On("GetPayoutByCampaignID", campaignID)}
}

func (_c *MockPayoutService_GetPayoutByCampaignID_Call) Run(run func(campaignID string)) *MockPayoutService_GetPayoutByCampaignID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPayoutService_GetPayoutByCampaignID_Call) Return(_a0 *models.Payout, _a1 error) *MockPayoutService_GetPayoutByCampaignID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutService_GetPayoutByCampaignID_Call) RunAndReturn(run func(string) (*models.Payout, error)) *MockPayoutService_GetPayoutByCampaignID_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeManualPayout provides a mock function with given fields: campaignID, userHandle
func (_m *MockPayoutService) InitializeManualPayout(campaignID string, userHandle string) (*models.Payout, error) {
	ret := _m.Called(campaignID, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for InitializeManualPayout")
	}

	var r0 *models.Payout
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Payout, error)); ok {
		return rf(campaignID, userHandle)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Payout); ok {
		r0 = rf(campaignID, userHandle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payout)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(campaignID, userHandle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutService_InitializeManualPayout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeManualPayout'
type MockPayoutService_InitializeManualPayout_Call struct {
	*mock.Call
}

// InitializeManualPayout is a helper method to define mock.On call
//   - campaignID string
//   - userHandle string
func (_e *MockPayoutService_Expecter) InitializeManualPayout(campaignID interface{}, userHandle interface{}) *MockPayoutService_InitializeManualPayout_Call {
	return &MockPayoutService_InitializeManualPayout_Call{Call: _e.mock.On("InitializeManualPayout", campaignID, userHandle)}
}

func (_c *MockPayoutService_InitializeManualPayout_Call) Run(run func(campaignID string, userHandle string)) *MockPayoutService_InitializeManualPayout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPayoutService_InitializeManualPayout_Call) Return(_a0 *models.Payout, _a1 error) *MockPayoutService_InitializeManualPayout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutService_InitializeManualPayout_Call) RunAndReturn(run func(string, string) (*models.Payout, error)) *MockPayoutService_InitializeManualPayout_Call {
	_c.Call.Return(run)
	return _c
}

// InitializePayout provides a mock function with given fields: campaignID, userHandle, req
func (_m *MockPayoutService) InitializePayout(campaignID string, userHandle string, req dto.PayoutRequest) (*models.Payout, error) {
	ret := _m.Called(campaignID, userHandle, req)

	if len(ret) == 0 {
		panic("no return value specified for InitializePayout")
	}

	var r0 *models.Payout
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, dto.PayoutRequest) (*models.Payout, error)); ok {
		return rf(campaignID, userHandle, req)
	}
	if rf, ok := ret.Get(0).(func(string, string, dto.PayoutRequest) *models.Payout); ok {
		r0 = rf(campaignID, userHandle, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payout)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, dto.PayoutRequest) error); ok {
		r1 = rf(campaignID, userHandle, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutService_InitializePayout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializePayout'
type MockPayoutService_InitializePayout_Call struct {
	*mock.Call
}

// InitializePayout is a helper method to define mock.On call
//   - campaignID string
//   - userHandle string
//   - req dto.PayoutRequest
func (_e *MockPayoutService_Expecter) InitializePayout(campaignID interface{}, userHandle interface{}, req interface{}) *MockPayoutService_InitializePayout_Call {
	return &MockPayoutService_InitializePayout_Call{Call: _e.mock.On("InitializePayout", campaignID, userHandle, req)}
}

func (_c *MockPayoutService_InitializePayout_Call) Run(run func(campaignID string, userHandle string, req dto.PayoutRequest)) *MockPayoutService_InitializePayout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(dto.PayoutRequest))
	})
	return _c
}

func (_c *MockPayoutService_InitializePayout_Call) Return(_a0 *models.Payout, _a1 error) *MockPayoutService_InitializePayout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutService_InitializePayout_Call) RunAndReturn(run func(string, string, dto.PayoutRequest) (*models.Payout, error)) *MockPayoutService_InitializePayout_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAccount provides a mock function with given fields: _a0
func (_m *MockPayoutService) VerifyAccount(_a0 dto.VerifyAccountRequest) (interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAccount")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.VerifyAccountRequest) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(dto.VerifyAccountRequest) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(dto.VerifyAccountRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutService_VerifyAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAccount'
type MockPayoutService_VerifyAccount_Call struct {
	*mock.Call
}

// VerifyAccount is a helper method to define mock.On call
//   - _a0 dto.VerifyAccountRequest
func (_e *MockPayoutService_Expecter) VerifyAccount(_a0 interface{}) *MockPayoutService_VerifyAccount_Call {
	return &MockPayoutService_VerifyAccount_Call{Call: _e.mock.On("VerifyAccount", _a0)}
}

func (_c *MockPayoutService_VerifyAccount_Call) Run(run func(_a0 dto.VerifyAccountRequest)) *MockPayoutService_VerifyAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.VerifyAccountRequest))
	})
	return _c
}

func (_c *MockPayoutService_VerifyAccount_Call) Return(_a0 interface{}, _a1 error) *MockPayoutService_VerifyAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutService_VerifyAccount_Call) RunAndReturn(run func(dto.VerifyAccountRequest) (interface{}, error)) *MockPayoutService_VerifyAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPayoutService creates a new instance of MockPayoutService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPayoutService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPayoutService {
	mock := &MockPayoutService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
