// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CampaignService is an autogenerated mock type for the CampaignService type
type CampaignService struct {
	mock.Mock
}

// CreateCampaign provides a mock function with given fields: campaign, userHandle
func (_m *CampaignService) CreateCampaign(campaign models.Campaign, userHandle string) (models.Campaign, error) {
	ret := _m.Called(campaign, userHandle)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampaign")
	}

	var r0 models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Campaign, string) (models.Campaign, error)); ok {
		return rf(campaign, userHandle)
	}
	if rf, ok := ret.Get(0).(func(models.Campaign, string) models.Campaign); ok {
		r0 = rf(campaign, userHandle)
	} else {
		r0 = ret.Get(0).(models.Campaign)
	}

	if rf, ok := ret.Get(1).(func(models.Campaign, string) error); ok {
		r1 = rf(campaign, userHandle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailsCanContribute provides a mock function with given fields: contributorsEmail
func (_m *CampaignService) EmailsCanContribute(contributorsEmail []string) ([]string, error) {
	ret := _m.Called(contributorsEmail)

	if len(ret) == 0 {
		panic("no return value specified for EmailsCanContribute")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(contributorsEmail)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(contributorsEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(contributorsEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignByID provides a mock function with given fields: id
func (_m *CampaignService) GetCampaignByID(id string) (*models.Campaign, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignByID")
	}

	var r0 *models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Campaign, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Campaign); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCanCreateCampaign provides a mock function with given fields: userHandle
func (_m *CampaignService) UserCanCreateCampaign(userHandle string) error {
	ret := _m.Called(userHandle)

	if len(ret) == 0 {
		panic("no return value specified for UserCanCreateCampaign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCampaignService creates a new instance of CampaignService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCampaignService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CampaignService {
	mock := &CampaignService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
