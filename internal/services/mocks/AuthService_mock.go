// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0
func (_m *MockAuthService) CreateUser(_a0 models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 models.User
func (_e *MockAuthService_Expecter) CreateUser(_a0 interface{}) *MockAuthService_CreateUser_Call {
	return &MockAuthService_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *MockAuthService_CreateUser_Call) Run(run func(_a0 models.User)) *MockAuthService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockAuthService_CreateUser_Call) Return(_a0 error) *MockAuthService_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_CreateUser_Call) RunAndReturn(run func(models.User) error) *MockAuthService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUsers provides a mock function with given fields: users
func (_m *MockAuthService) CreateUsers(users []models.User) ([]models.User, error) {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.User) ([]models.User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]models.User) []models.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_CreateUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUsers'
type MockAuthService_CreateUsers_Call struct {
	*mock.Call
}

// CreateUsers is a helper method to define mock.On call
//   - users []models.User
func (_e *MockAuthService_Expecter) CreateUsers(users interface{}) *MockAuthService_CreateUsers_Call {
	return &MockAuthService_CreateUsers_Call{Call: _e.mock.On("CreateUsers", users)}
}

func (_c *MockAuthService_CreateUsers_Call) Run(run func(users []models.User)) *MockAuthService_CreateUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.User))
	})
	return _c
}

func (_c *MockAuthService_CreateUsers_Call) Return(_a0 []models.User, _a1 error) *MockAuthService_CreateUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_CreateUsers_Call) RunAndReturn(run func([]models.User) ([]models.User, error)) *MockAuthService_CreateUsers_Call {
	_c.Call.Return(run)
	return _c
}

// FindExistingAndNonExistingUsers provides a mock function with given fields: email
func (_m *MockAuthService) FindExistingAndNonExistingUsers(email []string) ([]models.User, []string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindExistingAndNonExistingUsers")
	}

	var r0 []models.User
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.User, []string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) []string); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func([]string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_FindExistingAndNonExistingUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindExistingAndNonExistingUsers'
type MockAuthService_FindExistingAndNonExistingUsers_Call struct {
	*mock.Call
}

// FindExistingAndNonExistingUsers is a helper method to define mock.On call
//   - email []string
func (_e *MockAuthService_Expecter) FindExistingAndNonExistingUsers(email interface{}) *MockAuthService_FindExistingAndNonExistingUsers_Call {
	return &MockAuthService_FindExistingAndNonExistingUsers_Call{Call: _e.mock.On("FindExistingAndNonExistingUsers", email)}
}

func (_c *MockAuthService_FindExistingAndNonExistingUsers_Call) Run(run func(email []string)) *MockAuthService_FindExistingAndNonExistingUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockAuthService_FindExistingAndNonExistingUsers_Call) Return(existing []models.User, nonExisting []string, err error) *MockAuthService_FindExistingAndNonExistingUsers_Call {
	_c.Call.Return(existing, nonExisting, err)
	return _c
}

func (_c *MockAuthService_FindExistingAndNonExistingUsers_Call) RunAndReturn(run func([]string) ([]models.User, []string, error)) *MockAuthService_FindExistingAndNonExistingUsers_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *MockAuthService) FindUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type MockAuthService_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockAuthService_Expecter) FindUserByEmail(email interface{}) *MockAuthService_FindUserByEmail_Call {
	return &MockAuthService_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", email)}
}

func (_c *MockAuthService_FindUserByEmail_Call) Run(run func(email string)) *MockAuthService_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_FindUserByEmail_Call) Return(_a0 *models.User, _a1 error) *MockAuthService_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_FindUserByEmail_Call) RunAndReturn(run func(string) (*models.User, error)) *MockAuthService_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function with given fields: _a0
func (_m *MockAuthService) GenerateToken(_a0 models.User) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.User) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAuthService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - _a0 models.User
func (_e *MockAuthService_Expecter) GenerateToken(_a0 interface{}) *MockAuthService_GenerateToken_Call {
	return &MockAuthService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", _a0)}
}

func (_c *MockAuthService_GenerateToken_Call) Run(run func(_a0 models.User)) *MockAuthService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockAuthService_GenerateToken_Call) Return(_a0 string, _a1 error) *MockAuthService_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GenerateToken_Call) RunAndReturn(run func(models.User) (string, error)) *MockAuthService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUser provides a mock function with no fields
func (_m *MockAuthService) GetAllUser() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUser")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GetAllUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUser'
type MockAuthService_GetAllUser_Call struct {
	*mock.Call
}

// GetAllUser is a helper method to define mock.On call
func (_e *MockAuthService_Expecter) GetAllUser() *MockAuthService_GetAllUser_Call {
	return &MockAuthService_GetAllUser_Call{Call: _e.mock.On("GetAllUser")}
}

func (_c *MockAuthService_GetAllUser_Call) Run(run func()) *MockAuthService_GetAllUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthService_GetAllUser_Call) Return(_a0 []models.User, _a1 error) *MockAuthService_GetAllUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetAllUser_Call) RunAndReturn(run func() ([]models.User, error)) *MockAuthService_GetAllUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *MockAuthService) GetUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockAuthService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockAuthService_Expecter) GetUserByEmail(email interface{}) *MockAuthService_GetUserByEmail_Call {
	return &MockAuthService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *MockAuthService_GetUserByEmail_Call) Run(run func(email string)) *MockAuthService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *MockAuthService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetUserByEmail_Call) RunAndReturn(run func(string) (*models.User, error)) *MockAuthService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByHandle provides a mock function with given fields: handle
func (_m *MockAuthService) GetUserByHandle(handle string) (models.User, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByHandle")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GetUserByHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByHandle'
type MockAuthService_GetUserByHandle_Call struct {
	*mock.Call
}

// GetUserByHandle is a helper method to define mock.On call
//   - handle string
func (_e *MockAuthService_Expecter) GetUserByHandle(handle interface{}) *MockAuthService_GetUserByHandle_Call {
	return &MockAuthService_GetUserByHandle_Call{Call: _e.mock.On("GetUserByHandle", handle)}
}

func (_c *MockAuthService_GetUserByHandle_Call) Run(run func(handle string)) *MockAuthService_GetUserByHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_GetUserByHandle_Call) Return(_a0 models.User, _a1 error) *MockAuthService_GetUserByHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetUserByHandle_Call) RunAndReturn(run func(string) (models.User, error)) *MockAuthService_GetUserByHandle_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFCMToken provides a mock function with given fields: handle, token
func (_m *MockAuthService) RemoveFCMToken(handle string, token string) error {
	ret := _m.Called(handle, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFCMToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(handle, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_RemoveFCMToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFCMToken'
type MockAuthService_RemoveFCMToken_Call struct {
	*mock.Call
}

// RemoveFCMToken is a helper method to define mock.On call
//   - handle string
//   - token string
func (_e *MockAuthService_Expecter) RemoveFCMToken(handle interface{}, token interface{}) *MockAuthService_RemoveFCMToken_Call {
	return &MockAuthService_RemoveFCMToken_Call{Call: _e.mock.On("RemoveFCMToken", handle, token)}
}

func (_c *MockAuthService_RemoveFCMToken_Call) Run(run func(handle string, token string)) *MockAuthService_RemoveFCMToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_RemoveFCMToken_Call) Return(_a0 error) *MockAuthService_RemoveFCMToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_RemoveFCMToken_Call) RunAndReturn(run func(string, string) error) *MockAuthService_RemoveFCMToken_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAuth provides a mock function with given fields: _a0, _a1
func (_m *MockAuthService) RequestAuth(_a0 string, _a1 string) (models.Otp, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RequestAuth")
	}

	var r0 models.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.Otp, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.Otp); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Otp)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_RequestAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAuth'
type MockAuthService_RequestAuth_Call struct {
	*mock.Call
}

// RequestAuth is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockAuthService_Expecter) RequestAuth(_a0 interface{}, _a1 interface{}) *MockAuthService_RequestAuth_Call {
	return &MockAuthService_RequestAuth_Call{Call: _e.mock.On("RequestAuth", _a0, _a1)}
}

func (_c *MockAuthService_RequestAuth_Call) Run(run func(_a0 string, _a1 string)) *MockAuthService_RequestAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_RequestAuth_Call) Return(_a0 models.Otp, _a1 error) *MockAuthService_RequestAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_RequestAuth_Call) RunAndReturn(run func(string, string) (models.Otp, error)) *MockAuthService_RequestAuth_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFCMToken provides a mock function with given fields: handle, token
func (_m *MockAuthService) SaveFCMToken(handle string, token string) error {
	ret := _m.Called(handle, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveFCMToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(handle, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_SaveFCMToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFCMToken'
type MockAuthService_SaveFCMToken_Call struct {
	*mock.Call
}

// SaveFCMToken is a helper method to define mock.On call
//   - handle string
//   - token string
func (_e *MockAuthService_Expecter) SaveFCMToken(handle interface{}, token interface{}) *MockAuthService_SaveFCMToken_Call {
	return &MockAuthService_SaveFCMToken_Call{Call: _e.mock.On("SaveFCMToken", handle, token)}
}

func (_c *MockAuthService_SaveFCMToken_Call) Run(run func(handle string, token string)) *MockAuthService_SaveFCMToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_SaveFCMToken_Call) Return(_a0 error) *MockAuthService_SaveFCMToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_SaveFCMToken_Call) RunAndReturn(run func(string, string) error) *MockAuthService_SaveFCMToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *MockAuthService) UpdateUser(_a0 models.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockAuthService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 models.User
func (_e *MockAuthService_Expecter) UpdateUser(_a0 interface{}) *MockAuthService_UpdateUser_Call {
	return &MockAuthService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0)}
}

func (_c *MockAuthService_UpdateUser_Call) Run(run func(_a0 models.User)) *MockAuthService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockAuthService_UpdateUser_Call) Return(_a0 error) *MockAuthService_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_UpdateUser_Call) RunAndReturn(run func(models.User) error) *MockAuthService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAuth provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAuthService) VerifyAuth(_a0 string, _a1 string, _a2 string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAuth")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (string, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_VerifyAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAuth'
type MockAuthService_VerifyAuth_Call struct {
	*mock.Call
}

// VerifyAuth is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
//   - _a2 string
func (_e *MockAuthService_Expecter) VerifyAuth(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockAuthService_VerifyAuth_Call {
	return &MockAuthService_VerifyAuth_Call{Call: _e.mock.On("VerifyAuth", _a0, _a1, _a2)}
}

func (_c *MockAuthService_VerifyAuth_Call) Run(run func(_a0 string, _a1 string, _a2 string)) *MockAuthService_VerifyAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuthService_VerifyAuth_Call) Return(_a0 string, _a1 error) *MockAuthService_VerifyAuth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_VerifyAuth_Call) RunAndReturn(run func(string, string, string) (string, error)) *MockAuthService_VerifyAuth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
