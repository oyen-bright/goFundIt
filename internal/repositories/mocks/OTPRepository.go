// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OTPRepository is an autogenerated mock type for the OTPRepository type
type OTPRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: otp
func (_m *OTPRepository) Add(otp *models.Otp) error {
	ret := _m.Called(otp)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Otp) error); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: otp
func (_m *OTPRepository) Delete(otp *models.Otp) error {
	ret := _m.Called(otp)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Otp) error); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmailAndReference provides a mock function with given fields: email, requestId
func (_m *OTPRepository) GetByEmailAndReference(email string, requestId string) (*models.Otp, error) {
	ret := _m.Called(email, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmailAndReference")
	}

	var r0 *models.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Otp, error)); ok {
		return rf(email, requestId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Otp); ok {
		r0 = rf(email, requestId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Otp)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateOtherOTPs provides a mock function with given fields: email, code, requestId
func (_m *OTPRepository) InvalidateOtherOTPs(email string, code string, requestId string) error {
	ret := _m.Called(email, code, requestId)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateOtherOTPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, code, requestId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOTPRepository creates a new instance of OTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPRepository {
	mock := &OTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
