// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CreateMultiple provides a mock function with given fields: users
func (_m *AuthRepository) CreateMultiple(users []models.User) ([]models.User, error) {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiple")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.User) ([]models.User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]models.User) []models.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: user
func (_m *AuthRepository) Delete(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByHandle provides a mock function with given fields: handle
func (_m *AuthRepository) FindByHandle(handle string) (*models.User, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for FindByHandle")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNonExistingUsers provides a mock function with given fields: users
func (_m *AuthRepository) FindNonExistingUsers(users []models.User) ([]models.User, error) {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for FindNonExistingUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.User) ([]models.User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]models.User) []models.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *AuthRepository) Save(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
