// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockActivityRepository is an autogenerated mock type for the ActivityRepository type
type MockActivityRepository struct {
	mock.Mock
}

type MockActivityRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActivityRepository) EXPECT() *MockActivityRepository_Expecter {
	return &MockActivityRepository_Expecter{mock: &_m.Mock}
}

// AddContributor provides a mock function with given fields: activityID, contributorID
func (_m *MockActivityRepository) AddContributor(activityID uint, contributorID uint) error {
	ret := _m.Called(activityID, contributorID)

	if len(ret) == 0 {
		panic("no return value specified for AddContributor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(activityID, contributorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityRepository_AddContributor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddContributor'
type MockActivityRepository_AddContributor_Call struct {
	*mock.Call
}

// AddContributor is a helper method to define mock.On call
//   - activityID uint
//   - contributorID uint
func (_e *MockActivityRepository_Expecter) AddContributor(activityID interface{}, contributorID interface{}) *MockActivityRepository_AddContributor_Call {
	return &MockActivityRepository_AddContributor_Call{Call: _e.mock.On("AddContributor", activityID, contributorID)}
}

func (_c *MockActivityRepository_AddContributor_Call) Run(run func(activityID uint, contributorID uint)) *MockActivityRepository_AddContributor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockActivityRepository_AddContributor_Call) Return(_a0 error) *MockActivityRepository_AddContributor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityRepository_AddContributor_Call) RunAndReturn(run func(uint, uint) error) *MockActivityRepository_AddContributor_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: activity
func (_m *MockActivityRepository) Create(activity *models.Activity) (models.Activity, error) {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Activity) (models.Activity, error)); ok {
		return rf(activity)
	}
	if rf, ok := ret.Get(0).(func(*models.Activity) models.Activity); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Get(0).(models.Activity)
	}

	if rf, ok := ret.Get(1).(func(*models.Activity) error); ok {
		r1 = rf(activity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockActivityRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - activity *models.Activity
func (_e *MockActivityRepository_Expecter) Create(activity interface{}) *MockActivityRepository_Create_Call {
	return &MockActivityRepository_Create_Call{Call: _e.mock.On("Create", activity)}
}

func (_c *MockActivityRepository_Create_Call) Run(run func(activity *models.Activity)) *MockActivityRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity))
	})
	return _c
}

func (_c *MockActivityRepository_Create_Call) Return(_a0 models.Activity, _a1 error) *MockActivityRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_Create_Call) RunAndReturn(run func(*models.Activity) (models.Activity, error)) *MockActivityRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: activity
func (_m *MockActivityRepository) Delete(activity *models.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockActivityRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - activity *models.Activity
func (_e *MockActivityRepository_Expecter) Delete(activity interface{}) *MockActivityRepository_Delete_Call {
	return &MockActivityRepository_Delete_Call{Call: _e.mock.On("Delete", activity)}
}

func (_c *MockActivityRepository_Delete_Call) Run(run func(activity *models.Activity)) *MockActivityRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity))
	})
	return _c
}

func (_c *MockActivityRepository_Delete_Call) Return(_a0 error) *MockActivityRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityRepository_Delete_Call) RunAndReturn(run func(*models.Activity) error) *MockActivityRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCampaignID provides a mock function with given fields: campaignID
func (_m *MockActivityRepository) GetByCampaignID(campaignID string) ([]models.Activity, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCampaignID")
	}

	var r0 []models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Activity, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Activity); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_GetByCampaignID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCampaignID'
type MockActivityRepository_GetByCampaignID_Call struct {
	*mock.Call
}

// GetByCampaignID is a helper method to define mock.On call
//   - campaignID string
func (_e *MockActivityRepository_Expecter) GetByCampaignID(campaignID interface{}) *MockActivityRepository_GetByCampaignID_Call {
	return &MockActivityRepository_GetByCampaignID_Call{Call: _e.mock.On("GetByCampaignID", campaignID)}
}

func (_c *MockActivityRepository_GetByCampaignID_Call) Run(run func(campaignID string)) *MockActivityRepository_GetByCampaignID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockActivityRepository_GetByCampaignID_Call) Return(_a0 []models.Activity, _a1 error) *MockActivityRepository_GetByCampaignID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_GetByCampaignID_Call) RunAndReturn(run func(string) ([]models.Activity, error)) *MockActivityRepository_GetByCampaignID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: activityID
func (_m *MockActivityRepository) GetByID(activityID uint) (models.Activity, error) {
	ret := _m.Called(activityID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Activity, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Activity); ok {
		r0 = rf(activityID)
	} else {
		r0 = ret.Get(0).(models.Activity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockActivityRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - activityID uint
func (_e *MockActivityRepository_Expecter) GetByID(activityID interface{}) *MockActivityRepository_GetByID_Call {
	return &MockActivityRepository_GetByID_Call{Call: _e.mock.On("GetByID", activityID)}
}

func (_c *MockActivityRepository_GetByID_Call) Run(run func(activityID uint)) *MockActivityRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockActivityRepository_GetByID_Call) Return(_a0 models.Activity, _a1 error) *MockActivityRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_GetByID_Call) RunAndReturn(run func(uint) (models.Activity, error)) *MockActivityRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetParticipants provides a mock function with given fields: activityID
func (_m *MockActivityRepository) GetParticipants(activityID uint) ([]models.Contributor, error) {
	ret := _m.Called(activityID)

	if len(ret) == 0 {
		panic("no return value specified for GetParticipants")
	}

	var r0 []models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Contributor, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Contributor); ok {
		r0 = rf(activityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contributor)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActivityRepository_GetParticipants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParticipants'
type MockActivityRepository_GetParticipants_Call struct {
	*mock.Call
}

// GetParticipants is a helper method to define mock.On call
//   - activityID uint
func (_e *MockActivityRepository_Expecter) GetParticipants(activityID interface{}) *MockActivityRepository_GetParticipants_Call {
	return &MockActivityRepository_GetParticipants_Call{Call: _e.mock.On("GetParticipants", activityID)}
}

func (_c *MockActivityRepository_GetParticipants_Call) Run(run func(activityID uint)) *MockActivityRepository_GetParticipants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockActivityRepository_GetParticipants_Call) Return(_a0 []models.Contributor, _a1 error) *MockActivityRepository_GetParticipants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActivityRepository_GetParticipants_Call) RunAndReturn(run func(uint) ([]models.Contributor, error)) *MockActivityRepository_GetParticipants_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveContributor provides a mock function with given fields: activityID, contributorID
func (_m *MockActivityRepository) RemoveContributor(activityID uint, contributorID uint) error {
	ret := _m.Called(activityID, contributorID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveContributor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(activityID, contributorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityRepository_RemoveContributor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContributor'
type MockActivityRepository_RemoveContributor_Call struct {
	*mock.Call
}

// RemoveContributor is a helper method to define mock.On call
//   - activityID uint
//   - contributorID uint
func (_e *MockActivityRepository_Expecter) RemoveContributor(activityID interface{}, contributorID interface{}) *MockActivityRepository_RemoveContributor_Call {
	return &MockActivityRepository_RemoveContributor_Call{Call: _e.mock.On("RemoveContributor", activityID, contributorID)}
}

func (_c *MockActivityRepository_RemoveContributor_Call) Run(run func(activityID uint, contributorID uint)) *MockActivityRepository_RemoveContributor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockActivityRepository_RemoveContributor_Call) Return(_a0 error) *MockActivityRepository_RemoveContributor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityRepository_RemoveContributor_Call) RunAndReturn(run func(uint, uint) error) *MockActivityRepository_RemoveContributor_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: activity
func (_m *MockActivityRepository) Save(activity *models.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockActivityRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - activity *models.Activity
func (_e *MockActivityRepository_Expecter) Save(activity interface{}) *MockActivityRepository_Save_Call {
	return &MockActivityRepository_Save_Call{Call: _e.mock.On("Save", activity)}
}

func (_c *MockActivityRepository_Save_Call) Run(run func(activity *models.Activity)) *MockActivityRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity))
	})
	return _c
}

func (_c *MockActivityRepository_Save_Call) Return(_a0 error) *MockActivityRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityRepository_Save_Call) RunAndReturn(run func(*models.Activity) error) *MockActivityRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: activity
func (_m *MockActivityRepository) Update(activity *models.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockActivityRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockActivityRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - activity *models.Activity
func (_e *MockActivityRepository_Expecter) Update(activity interface{}) *MockActivityRepository_Update_Call {
	return &MockActivityRepository_Update_Call{Call: _e.mock.On("Update", activity)}
}

func (_c *MockActivityRepository_Update_Call) Run(run func(activity *models.Activity)) *MockActivityRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Activity))
	})
	return _c
}

func (_c *MockActivityRepository_Update_Call) Return(_a0 error) *MockActivityRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockActivityRepository_Update_Call) RunAndReturn(run func(*models.Activity) error) *MockActivityRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActivityRepository creates a new instance of MockActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActivityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActivityRepository {
	mock := &MockActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
