// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: payment
func (_m *PaymentRepository) CreatePayment(payment *models.Payment) error {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Payment) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePayment provides a mock function with given fields: paymentID
func (_m *PaymentRepository) DeletePayment(paymentID string) error {
	ret := _m.Called(paymentID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPayment provides a mock function with given fields: paymentID
func (_m *PaymentRepository) GetPayment(paymentID string) (*models.Payment, error) {
	ret := _m.Called(paymentID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Payment, error)); ok {
		return rf(paymentID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Payment); ok {
		r0 = rf(paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByContributorID provides a mock function with given fields: contributorID
func (_m *PaymentRepository) GetPaymentByContributorID(contributorID string) ([]*models.Payment, error) {
	ret := _m.Called(contributorID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByContributorID")
	}

	var r0 []*models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Payment, error)); ok {
		return rf(contributorID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Payment); ok {
		r0 = rf(contributorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(contributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPayments provides a mock function with given fields: campaignID
func (_m *PaymentRepository) ListPayments(campaignID string) ([]*models.Payment, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for ListPayments")
	}

	var r0 []*models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Payment, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Payment); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: payment
func (_m *PaymentRepository) UpdatePayment(payment *models.Payment) error {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Payment) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentRepository creates a new instance of PaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentRepository {
	mock := &PaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
