// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	time "time"

	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAnalyticsRepository is an autogenerated mock type for the AnalyticsRepository type
type MockAnalyticsRepository struct {
	mock.Mock
}

type MockAnalyticsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalyticsRepository) EXPECT() *MockAnalyticsRepository_Expecter {
	return &MockAnalyticsRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: date
func (_m *MockAnalyticsRepository) Get(date time.Time) (*models.PlatformAnalytics, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.PlatformAnalytics
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (*models.PlatformAnalytics, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) *models.PlatformAnalytics); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PlatformAnalytics)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAnalyticsRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAnalyticsRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - date time.Time
func (_e *MockAnalyticsRepository_Expecter) Get(date interface{}) *MockAnalyticsRepository_Get_Call {
	return &MockAnalyticsRepository_Get_Call{Call: _e.mock.On("Get", date)}
}

func (_c *MockAnalyticsRepository_Get_Call) Run(run func(date time.Time)) *MockAnalyticsRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockAnalyticsRepository_Get_Call) Return(_a0 *models.PlatformAnalytics, _a1 error) *MockAnalyticsRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAnalyticsRepository_Get_Call) RunAndReturn(run func(time.Time) (*models.PlatformAnalytics, error)) *MockAnalyticsRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: analytics
func (_m *MockAnalyticsRepository) Save(analytics *models.PlatformAnalytics) error {
	ret := _m.Called(analytics)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.PlatformAnalytics) error); ok {
		r0 = rf(analytics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAnalyticsRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockAnalyticsRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - analytics *models.PlatformAnalytics
func (_e *MockAnalyticsRepository_Expecter) Save(analytics interface{}) *MockAnalyticsRepository_Save_Call {
	return &MockAnalyticsRepository_Save_Call{Call: _e.mock.On("Save", analytics)}
}

func (_c *MockAnalyticsRepository_Save_Call) Run(run func(analytics *models.PlatformAnalytics)) *MockAnalyticsRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.PlatformAnalytics))
	})
	return _c
}

func (_c *MockAnalyticsRepository_Save_Call) Return(_a0 error) *MockAnalyticsRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnalyticsRepository_Save_Call) RunAndReturn(run func(*models.PlatformAnalytics) error) *MockAnalyticsRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnalyticsRepository creates a new instance of MockAnalyticsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalyticsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalyticsRepository {
	mock := &MockAnalyticsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
