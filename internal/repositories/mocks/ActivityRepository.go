// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ActivityRepository is an autogenerated mock type for the ActivityRepository type
type ActivityRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: activity
func (_m *ActivityRepository) Create(activity *models.Activity) (models.Activity, error) {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Activity) (models.Activity, error)); ok {
		return rf(activity)
	}
	if rf, ok := ret.Get(0).(func(*models.Activity) models.Activity); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Get(0).(models.Activity)
	}

	if rf, ok := ret.Get(1).(func(*models.Activity) error); ok {
		r1 = rf(activity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: activity
func (_m *ActivityRepository) Delete(activity *models.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivitiesByCampaignID provides a mock function with given fields: campaignID
func (_m *ActivityRepository) GetActivitiesByCampaignID(campaignID string) ([]models.Activity, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetActivitiesByCampaignID")
	}

	var r0 []models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Activity, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Activity); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Activity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityByID provides a mock function with given fields: activityID
func (_m *ActivityRepository) GetActivityByID(activityID uint) (models.Activity, error) {
	ret := _m.Called(activityID)

	if len(ret) == 0 {
		panic("no return value specified for GetActivityByID")
	}

	var r0 models.Activity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Activity, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Activity); ok {
		r0 = rf(activityID)
	} else {
		r0 = ret.Get(0).(models.Activity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActivityParticipants provides a mock function with given fields: activityID
func (_m *ActivityRepository) GetActivityParticipants(activityID uint) ([]models.Contributor, error) {
	ret := _m.Called(activityID)

	if len(ret) == 0 {
		panic("no return value specified for GetActivityParticipants")
	}

	var r0 []models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Contributor, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Contributor); ok {
		r0 = rf(activityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contributor)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: activity
func (_m *ActivityRepository) Update(activity *models.Activity) error {
	ret := _m.Called(activity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Activity) error); ok {
		r0 = rf(activity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActivityRepository creates a new instance of ActivityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActivityRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActivityRepository {
	mock := &ActivityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
