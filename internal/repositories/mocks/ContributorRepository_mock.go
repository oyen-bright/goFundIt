// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockContributorRepository is an autogenerated mock type for the ContributorRepository type
type MockContributorRepository struct {
	mock.Mock
}

type MockContributorRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContributorRepository) EXPECT() *MockContributorRepository_Expecter {
	return &MockContributorRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: contribution
func (_m *MockContributorRepository) Create(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContributorRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockContributorRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - contribution *models.Contributor
func (_e *MockContributorRepository_Expecter) Create(contribution interface{}) *MockContributorRepository_Create_Call {
	return &MockContributorRepository_Create_Call{Call: _e.mock.On("Create", contribution)}
}

func (_c *MockContributorRepository_Create_Call) Run(run func(contribution *models.Contributor)) *MockContributorRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Contributor))
	})
	return _c
}

func (_c *MockContributorRepository_Create_Call) Return(_a0 error) *MockContributorRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContributorRepository_Create_Call) RunAndReturn(run func(*models.Contributor) error) *MockContributorRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: contribution
func (_m *MockContributorRepository) Delete(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContributorRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockContributorRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - contribution *models.Contributor
func (_e *MockContributorRepository_Expecter) Delete(contribution interface{}) *MockContributorRepository_Delete_Call {
	return &MockContributorRepository_Delete_Call{Call: _e.mock.On("Delete", contribution)}
}

func (_c *MockContributorRepository_Delete_Call) Run(run func(contribution *models.Contributor)) *MockContributorRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Contributor))
	})
	return _c
}

func (_c *MockContributorRepository_Delete_Call) Return(_a0 error) *MockContributorRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContributorRepository_Delete_Call) RunAndReturn(run func(*models.Contributor) error) *MockContributorRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetContributorById provides a mock function with given fields: contributorID, preload
func (_m *MockContributorRepository) GetContributorById(contributorID uint, preload bool) (models.Contributor, error) {
	ret := _m.Called(contributorID, preload)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorById")
	}

	var r0 models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, bool) (models.Contributor, error)); ok {
		return rf(contributorID, preload)
	}
	if rf, ok := ret.Get(0).(func(uint, bool) models.Contributor); ok {
		r0 = rf(contributorID, preload)
	} else {
		r0 = ret.Get(0).(models.Contributor)
	}

	if rf, ok := ret.Get(1).(func(uint, bool) error); ok {
		r1 = rf(contributorID, preload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContributorRepository_GetContributorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContributorById'
type MockContributorRepository_GetContributorById_Call struct {
	*mock.Call
}

// GetContributorById is a helper method to define mock.On call
//   - contributorID uint
//   - preload bool
func (_e *MockContributorRepository_Expecter) GetContributorById(contributorID interface{}, preload interface{}) *MockContributorRepository_GetContributorById_Call {
	return &MockContributorRepository_GetContributorById_Call{Call: _e.mock.On("GetContributorById", contributorID, preload)}
}

func (_c *MockContributorRepository_GetContributorById_Call) Run(run func(contributorID uint, preload bool)) *MockContributorRepository_GetContributorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *MockContributorRepository_GetContributorById_Call) Return(_a0 models.Contributor, _a1 error) *MockContributorRepository_GetContributorById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContributorRepository_GetContributorById_Call) RunAndReturn(run func(uint, bool) (models.Contributor, error)) *MockContributorRepository_GetContributorById_Call {
	_c.Call.Return(run)
	return _c
}

// GetContributorByUserHandle provides a mock function with given fields: userHandle
func (_m *MockContributorRepository) GetContributorByUserHandle(userHandle uint) (models.Contributor, error) {
	ret := _m.Called(userHandle)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorByUserHandle")
	}

	var r0 models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Contributor, error)); ok {
		return rf(userHandle)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Contributor); ok {
		r0 = rf(userHandle)
	} else {
		r0 = ret.Get(0).(models.Contributor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userHandle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContributorRepository_GetContributorByUserHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContributorByUserHandle'
type MockContributorRepository_GetContributorByUserHandle_Call struct {
	*mock.Call
}

// GetContributorByUserHandle is a helper method to define mock.On call
//   - userHandle uint
func (_e *MockContributorRepository_Expecter) GetContributorByUserHandle(userHandle interface{}) *MockContributorRepository_GetContributorByUserHandle_Call {
	return &MockContributorRepository_GetContributorByUserHandle_Call{Call: _e.mock.On("GetContributorByUserHandle", userHandle)}
}

func (_c *MockContributorRepository_GetContributorByUserHandle_Call) Run(run func(userHandle uint)) *MockContributorRepository_GetContributorByUserHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockContributorRepository_GetContributorByUserHandle_Call) Return(_a0 models.Contributor, _a1 error) *MockContributorRepository_GetContributorByUserHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContributorRepository_GetContributorByUserHandle_Call) RunAndReturn(run func(uint) (models.Contributor, error)) *MockContributorRepository_GetContributorByUserHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetContributorsByCampaignID provides a mock function with given fields: campaignID
func (_m *MockContributorRepository) GetContributorsByCampaignID(campaignID string) ([]models.Contributor, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorsByCampaignID")
	}

	var r0 []models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Contributor, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Contributor); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contributor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContributorRepository_GetContributorsByCampaignID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContributorsByCampaignID'
type MockContributorRepository_GetContributorsByCampaignID_Call struct {
	*mock.Call
}

// GetContributorsByCampaignID is a helper method to define mock.On call
//   - campaignID string
func (_e *MockContributorRepository_Expecter) GetContributorsByCampaignID(campaignID interface{}) *MockContributorRepository_GetContributorsByCampaignID_Call {
	return &MockContributorRepository_GetContributorsByCampaignID_Call{Call: _e.mock.On("GetContributorsByCampaignID", campaignID)}
}

func (_c *MockContributorRepository_GetContributorsByCampaignID_Call) Run(run func(campaignID string)) *MockContributorRepository_GetContributorsByCampaignID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContributorRepository_GetContributorsByCampaignID_Call) Return(_a0 []models.Contributor, _a1 error) *MockContributorRepository_GetContributorsByCampaignID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContributorRepository_GetContributorsByCampaignID_Call) RunAndReturn(run func(string) ([]models.Contributor, error)) *MockContributorRepository_GetContributorsByCampaignID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmailsOfActiveContributors provides a mock function with given fields: emails
func (_m *MockContributorRepository) GetEmailsOfActiveContributors(emails []string) ([]string, error) {
	ret := _m.Called(emails)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsOfActiveContributors")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(emails)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContributorRepository_GetEmailsOfActiveContributors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmailsOfActiveContributors'
type MockContributorRepository_GetEmailsOfActiveContributors_Call struct {
	*mock.Call
}

// GetEmailsOfActiveContributors is a helper method to define mock.On call
//   - emails []string
func (_e *MockContributorRepository_Expecter) GetEmailsOfActiveContributors(emails interface{}) *MockContributorRepository_GetEmailsOfActiveContributors_Call {
	return &MockContributorRepository_GetEmailsOfActiveContributors_Call{Call: _e.mock.On("GetEmailsOfActiveContributors", emails)}
}

func (_c *MockContributorRepository_GetEmailsOfActiveContributors_Call) Run(run func(emails []string)) *MockContributorRepository_GetEmailsOfActiveContributors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockContributorRepository_GetEmailsOfActiveContributors_Call) Return(_a0 []string, _a1 error) *MockContributorRepository_GetEmailsOfActiveContributors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContributorRepository_GetEmailsOfActiveContributors_Call) RunAndReturn(run func([]string) ([]string, error)) *MockContributorRepository_GetEmailsOfActiveContributors_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: contribution
func (_m *MockContributorRepository) Update(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContributorRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockContributorRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - contribution *models.Contributor
func (_e *MockContributorRepository_Expecter) Update(contribution interface{}) *MockContributorRepository_Update_Call {
	return &MockContributorRepository_Update_Call{Call: _e.mock.On("Update", contribution)}
}

func (_c *MockContributorRepository_Update_Call) Run(run func(contribution *models.Contributor)) *MockContributorRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Contributor))
	})
	return _c
}

func (_c *MockContributorRepository_Update_Call) Return(_a0 error) *MockContributorRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContributorRepository_Update_Call) RunAndReturn(run func(*models.Contributor) error) *MockContributorRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateName provides a mock function with given fields: contributorID, name
func (_m *MockContributorRepository) UpdateName(contributorID uint, name string) error {
	ret := _m.Called(contributorID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(contributorID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContributorRepository_UpdateName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateName'
type MockContributorRepository_UpdateName_Call struct {
	*mock.Call
}

// UpdateName is a helper method to define mock.On call
//   - contributorID uint
//   - name string
func (_e *MockContributorRepository_Expecter) UpdateName(contributorID interface{}, name interface{}) *MockContributorRepository_UpdateName_Call {
	return &MockContributorRepository_UpdateName_Call{Call: _e.mock.On("UpdateName", contributorID, name)}
}

func (_c *MockContributorRepository_UpdateName_Call) Run(run func(contributorID uint, name string)) *MockContributorRepository_UpdateName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockContributorRepository_UpdateName_Call) Return(_a0 error) *MockContributorRepository_UpdateName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContributorRepository_UpdateName_Call) RunAndReturn(run func(uint, string) error) *MockContributorRepository_UpdateName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockContributorRepository creates a new instance of MockContributorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContributorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContributorRepository {
	mock := &MockContributorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
