// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockCampaignRepository is an autogenerated mock type for the CampaignRepository type
type MockCampaignRepository struct {
	mock.Mock
}

type MockCampaignRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCampaignRepository) EXPECT() *MockCampaignRepository_Expecter {
	return &MockCampaignRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: campaign
func (_m *MockCampaignRepository) Create(campaign *models.Campaign) (models.Campaign, error) {
	ret := _m.Called(campaign)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Campaign) (models.Campaign, error)); ok {
		return rf(campaign)
	}
	if rf, ok := ret.Get(0).(func(*models.Campaign) models.Campaign); ok {
		r0 = rf(campaign)
	} else {
		r0 = ret.Get(0).(models.Campaign)
	}

	if rf, ok := ret.Get(1).(func(*models.Campaign) error); ok {
		r1 = rf(campaign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCampaignRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - campaign *models.Campaign
func (_e *MockCampaignRepository_Expecter) Create(campaign interface{}) *MockCampaignRepository_Create_Call {
	return &MockCampaignRepository_Create_Call{Call: _e.mock.On("Create", campaign)}
}

func (_c *MockCampaignRepository_Create_Call) Run(run func(campaign *models.Campaign)) *MockCampaignRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign))
	})
	return _c
}

func (_c *MockCampaignRepository_Create_Call) Return(_a0 models.Campaign, _a1 error) *MockCampaignRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_Create_Call) RunAndReturn(run func(*models.Campaign) (models.Campaign, error)) *MockCampaignRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: campaignID
func (_m *MockCampaignRepository) Delete(campaignID string) error {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(campaignID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCampaignRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCampaignRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - campaignID string
func (_e *MockCampaignRepository_Expecter) Delete(campaignID interface{}) *MockCampaignRepository_Delete_Call {
	return &MockCampaignRepository_Delete_Call{Call: _e.mock.On("Delete", campaignID)}
}

func (_c *MockCampaignRepository_Delete_Call) Run(run func(campaignID string)) *MockCampaignRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCampaignRepository_Delete_Call) Return(_a0 error) *MockCampaignRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCampaignRepository_Delete_Call) RunAndReturn(run func(string) error) *MockCampaignRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveCampaigns provides a mock function with no fields
func (_m *MockCampaignRepository) GetActiveCampaigns() ([]models.Campaign, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveCampaigns")
	}

	var r0 []models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Campaign, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Campaign); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_GetActiveCampaigns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveCampaigns'
type MockCampaignRepository_GetActiveCampaigns_Call struct {
	*mock.Call
}

// GetActiveCampaigns is a helper method to define mock.On call
func (_e *MockCampaignRepository_Expecter) GetActiveCampaigns() *MockCampaignRepository_GetActiveCampaigns_Call {
	return &MockCampaignRepository_GetActiveCampaigns_Call{Call: _e.mock.On("GetActiveCampaigns")}
}

func (_c *MockCampaignRepository_GetActiveCampaigns_Call) Run(run func()) *MockCampaignRepository_GetActiveCampaigns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCampaignRepository_GetActiveCampaigns_Call) Return(_a0 []models.Campaign, _a1 error) *MockCampaignRepository_GetActiveCampaigns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_GetActiveCampaigns_Call) RunAndReturn(run func() ([]models.Campaign, error)) *MockCampaignRepository_GetActiveCampaigns_Call {
	_c.Call.Return(run)
	return _c
}

// GetByHandle provides a mock function with given fields: handle
func (_m *MockCampaignRepository) GetByHandle(handle string) (models.Campaign, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for GetByHandle")
	}

	var r0 models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Campaign, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(string) models.Campaign); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Get(0).(models.Campaign)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_GetByHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByHandle'
type MockCampaignRepository_GetByHandle_Call struct {
	*mock.Call
}

// GetByHandle is a helper method to define mock.On call
//   - handle string
func (_e *MockCampaignRepository_Expecter) GetByHandle(handle interface{}) *MockCampaignRepository_GetByHandle_Call {
	return &MockCampaignRepository_GetByHandle_Call{Call: _e.mock.On("GetByHandle", handle)}
}

func (_c *MockCampaignRepository_GetByHandle_Call) Run(run func(handle string)) *MockCampaignRepository_GetByHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCampaignRepository_GetByHandle_Call) Return(_a0 models.Campaign, _a1 error) *MockCampaignRepository_GetByHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_GetByHandle_Call) RunAndReturn(run func(string) (models.Campaign, error)) *MockCampaignRepository_GetByHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockCampaignRepository) GetByID(id string) (models.Campaign, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Campaign, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Campaign); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Campaign)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockCampaignRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockCampaignRepository_Expecter) GetByID(id interface{}) *MockCampaignRepository_GetByID_Call {
	return &MockCampaignRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockCampaignRepository_GetByID_Call) Run(run func(id string)) *MockCampaignRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCampaignRepository_GetByID_Call) Return(_a0 models.Campaign, _a1 error) *MockCampaignRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_GetByID_Call) RunAndReturn(run func(string) (models.Campaign, error)) *MockCampaignRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDWithSelectedData provides a mock function with given fields: id, options
func (_m *MockCampaignRepository) GetByIDWithSelectedData(id string, options models.PreloadOption) (models.Campaign, error) {
	ret := _m.Called(id, options)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDWithSelectedData")
	}

	var r0 models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.PreloadOption) (models.Campaign, error)); ok {
		return rf(id, options)
	}
	if rf, ok := ret.Get(0).(func(string, models.PreloadOption) models.Campaign); ok {
		r0 = rf(id, options)
	} else {
		r0 = ret.Get(0).(models.Campaign)
	}

	if rf, ok := ret.Get(1).(func(string, models.PreloadOption) error); ok {
		r1 = rf(id, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_GetByIDWithSelectedData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDWithSelectedData'
type MockCampaignRepository_GetByIDWithSelectedData_Call struct {
	*mock.Call
}

// GetByIDWithSelectedData is a helper method to define mock.On call
//   - id string
//   - options models.PreloadOption
func (_e *MockCampaignRepository_Expecter) GetByIDWithSelectedData(id interface{}, options interface{}) *MockCampaignRepository_GetByIDWithSelectedData_Call {
	return &MockCampaignRepository_GetByIDWithSelectedData_Call{Call: _e.mock.On("GetByIDWithSelectedData", id, options)}
}

func (_c *MockCampaignRepository_GetByIDWithSelectedData_Call) Run(run func(id string, options models.PreloadOption)) *MockCampaignRepository_GetByIDWithSelectedData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.PreloadOption))
	})
	return _c
}

func (_c *MockCampaignRepository_GetByIDWithSelectedData_Call) Return(_a0 models.Campaign, _a1 error) *MockCampaignRepository_GetByIDWithSelectedData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_GetByIDWithSelectedData_Call) RunAndReturn(run func(string, models.PreloadOption) (models.Campaign, error)) *MockCampaignRepository_GetByIDWithSelectedData_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpiredCampaigns provides a mock function with no fields
func (_m *MockCampaignRepository) GetExpiredCampaigns() ([]models.Campaign, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpiredCampaigns")
	}

	var r0 []models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Campaign, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Campaign); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_GetExpiredCampaigns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiredCampaigns'
type MockCampaignRepository_GetExpiredCampaigns_Call struct {
	*mock.Call
}

// GetExpiredCampaigns is a helper method to define mock.On call
func (_e *MockCampaignRepository_Expecter) GetExpiredCampaigns() *MockCampaignRepository_GetExpiredCampaigns_Call {
	return &MockCampaignRepository_GetExpiredCampaigns_Call{Call: _e.mock.On("GetExpiredCampaigns")}
}

func (_c *MockCampaignRepository_GetExpiredCampaigns_Call) Run(run func()) *MockCampaignRepository_GetExpiredCampaigns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCampaignRepository_GetExpiredCampaigns_Call) Return(_a0 []models.Campaign, _a1 error) *MockCampaignRepository_GetExpiredCampaigns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_GetExpiredCampaigns_Call) RunAndReturn(run func() ([]models.Campaign, error)) *MockCampaignRepository_GetExpiredCampaigns_Call {
	_c.Call.Return(run)
	return _c
}

// GetNearEndCampaigns provides a mock function with no fields
func (_m *MockCampaignRepository) GetNearEndCampaigns() ([]models.Campaign, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNearEndCampaigns")
	}

	var r0 []models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Campaign, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Campaign); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Campaign)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_GetNearEndCampaigns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNearEndCampaigns'
type MockCampaignRepository_GetNearEndCampaigns_Call struct {
	*mock.Call
}

// GetNearEndCampaigns is a helper method to define mock.On call
func (_e *MockCampaignRepository_Expecter) GetNearEndCampaigns() *MockCampaignRepository_GetNearEndCampaigns_Call {
	return &MockCampaignRepository_GetNearEndCampaigns_Call{Call: _e.mock.On("GetNearEndCampaigns")}
}

func (_c *MockCampaignRepository_GetNearEndCampaigns_Call) Run(run func()) *MockCampaignRepository_GetNearEndCampaigns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCampaignRepository_GetNearEndCampaigns_Call) Return(_a0 []models.Campaign, _a1 error) *MockCampaignRepository_GetNearEndCampaigns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_GetNearEndCampaigns_Call) RunAndReturn(run func() ([]models.Campaign, error)) *MockCampaignRepository_GetNearEndCampaigns_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: campaign
func (_m *MockCampaignRepository) Update(campaign *models.Campaign) (models.Campaign, error) {
	ret := _m.Called(campaign)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Campaign
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Campaign) (models.Campaign, error)); ok {
		return rf(campaign)
	}
	if rf, ok := ret.Get(0).(func(*models.Campaign) models.Campaign); ok {
		r0 = rf(campaign)
	} else {
		r0 = ret.Get(0).(models.Campaign)
	}

	if rf, ok := ret.Get(1).(func(*models.Campaign) error); ok {
		r1 = rf(campaign)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCampaignRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCampaignRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - campaign *models.Campaign
func (_e *MockCampaignRepository_Expecter) Update(campaign interface{}) *MockCampaignRepository_Update_Call {
	return &MockCampaignRepository_Update_Call{Call: _e.mock.On("Update", campaign)}
}

func (_c *MockCampaignRepository_Update_Call) Run(run func(campaign *models.Campaign)) *MockCampaignRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Campaign))
	})
	return _c
}

func (_c *MockCampaignRepository_Update_Call) Return(_a0 models.Campaign, _a1 error) *MockCampaignRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCampaignRepository_Update_Call) RunAndReturn(run func(*models.Campaign) (models.Campaign, error)) *MockCampaignRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCampaignRepository creates a new instance of MockCampaignRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCampaignRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCampaignRepository {
	mock := &MockCampaignRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
