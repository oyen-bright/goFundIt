// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

type MockPaymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentRepository) EXPECT() *MockPaymentRepository_Expecter {
	return &MockPaymentRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: payment
func (_m *MockPaymentRepository) Create(payment *models.Payment) error {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Payment) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPaymentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - payment *models.Payment
func (_e *MockPaymentRepository_Expecter) Create(payment interface{}) *MockPaymentRepository_Create_Call {
	return &MockPaymentRepository_Create_Call{Call: _e.mock.On("Create", payment)}
}

func (_c *MockPaymentRepository_Create_Call) Run(run func(payment *models.Payment)) *MockPaymentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Payment))
	})
	return _c
}

func (_c *MockPaymentRepository_Create_Call) Return(_a0 error) *MockPaymentRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentRepository_Create_Call) RunAndReturn(run func(*models.Payment) error) *MockPaymentRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: reference
func (_m *MockPaymentRepository) Delete(reference string) error {
	ret := _m.Called(reference)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(reference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPaymentRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - reference string
func (_e *MockPaymentRepository_Expecter) Delete(reference interface{}) *MockPaymentRepository_Delete_Call {
	return &MockPaymentRepository_Delete_Call{Call: _e.mock.On("Delete", reference)}
}

func (_c *MockPaymentRepository_Delete_Call) Run(run func(reference string)) *MockPaymentRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPaymentRepository_Delete_Call) Return(_a0 error) *MockPaymentRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentRepository_Delete_Call) RunAndReturn(run func(string) error) *MockPaymentRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCampaign provides a mock function with given fields: campaignID, limit, offset
func (_m *MockPaymentRepository) GetByCampaign(campaignID string, limit int, offset int) ([]*models.Payment, int64, error) {
	ret := _m.Called(campaignID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByCampaign")
	}

	var r0 []*models.Payment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*models.Payment, int64, error)); ok {
		return rf(campaignID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*models.Payment); ok {
		r0 = rf(campaignID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(campaignID, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(campaignID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPaymentRepository_GetByCampaign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCampaign'
type MockPaymentRepository_GetByCampaign_Call struct {
	*mock.Call
}

// GetByCampaign is a helper method to define mock.On call
//   - campaignID string
//   - limit int
//   - offset int
func (_e *MockPaymentRepository_Expecter) GetByCampaign(campaignID interface{}, limit interface{}, offset interface{}) *MockPaymentRepository_GetByCampaign_Call {
	return &MockPaymentRepository_GetByCampaign_Call{Call: _e.mock.On("GetByCampaign", campaignID, limit, offset)}
}

func (_c *MockPaymentRepository_GetByCampaign_Call) Run(run func(campaignID string, limit int, offset int)) *MockPaymentRepository_GetByCampaign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPaymentRepository_GetByCampaign_Call) Return(_a0 []*models.Payment, _a1 int64, _a2 error) *MockPaymentRepository_GetByCampaign_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPaymentRepository_GetByCampaign_Call) RunAndReturn(run func(string, int, int) ([]*models.Payment, int64, error)) *MockPaymentRepository_GetByCampaign_Call {
	_c.Call.Return(run)
	return _c
}

// GetByContributor provides a mock function with given fields: contributorID, limit, offset
func (_m *MockPaymentRepository) GetByContributor(contributorID uint, limit int, offset int) ([]models.Payment, int64, error) {
	ret := _m.Called(contributorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByContributor")
	}

	var r0 []models.Payment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]models.Payment, int64, error)); ok {
		return rf(contributorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []models.Payment); ok {
		r0 = rf(contributorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) int64); ok {
		r1 = rf(contributorID, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(uint, int, int) error); ok {
		r2 = rf(contributorID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPaymentRepository_GetByContributor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByContributor'
type MockPaymentRepository_GetByContributor_Call struct {
	*mock.Call
}

// GetByContributor is a helper method to define mock.On call
//   - contributorID uint
//   - limit int
//   - offset int
func (_e *MockPaymentRepository_Expecter) GetByContributor(contributorID interface{}, limit interface{}, offset interface{}) *MockPaymentRepository_GetByContributor_Call {
	return &MockPaymentRepository_GetByContributor_Call{Call: _e.mock.On("GetByContributor", contributorID, limit, offset)}
}

func (_c *MockPaymentRepository_GetByContributor_Call) Run(run func(contributorID uint, limit int, offset int)) *MockPaymentRepository_GetByContributor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPaymentRepository_GetByContributor_Call) Return(_a0 []models.Payment, _a1 int64, _a2 error) *MockPaymentRepository_GetByContributor_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPaymentRepository_GetByContributor_Call) RunAndReturn(run func(uint, int, int) ([]models.Payment, int64, error)) *MockPaymentRepository_GetByContributor_Call {
	_c.Call.Return(run)
	return _c
}

// GetByReference provides a mock function with given fields: reference
func (_m *MockPaymentRepository) GetByReference(reference string) (*models.Payment, error) {
	ret := _m.Called(reference)

	if len(ret) == 0 {
		panic("no return value specified for GetByReference")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Payment, error)); ok {
		return rf(reference)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Payment); ok {
		r0 = rf(reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentRepository_GetByReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByReference'
type MockPaymentRepository_GetByReference_Call struct {
	*mock.Call
}

// GetByReference is a helper method to define mock.On call
//   - reference string
func (_e *MockPaymentRepository_Expecter) GetByReference(reference interface{}) *MockPaymentRepository_GetByReference_Call {
	return &MockPaymentRepository_GetByReference_Call{Call: _e.mock.On("GetByReference", reference)}
}

func (_c *MockPaymentRepository_GetByReference_Call) Run(run func(reference string)) *MockPaymentRepository_GetByReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPaymentRepository_GetByReference_Call) Return(_a0 *models.Payment, _a1 error) *MockPaymentRepository_GetByReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentRepository_GetByReference_Call) RunAndReturn(run func(string) (*models.Payment, error)) *MockPaymentRepository_GetByReference_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: payment
func (_m *MockPaymentRepository) Update(payment *models.Payment) error {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Payment) error); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPaymentRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - payment *models.Payment
func (_e *MockPaymentRepository_Expecter) Update(payment interface{}) *MockPaymentRepository_Update_Call {
	return &MockPaymentRepository_Update_Call{Call: _e.mock.On("Update", payment)}
}

func (_c *MockPaymentRepository_Update_Call) Run(run func(payment *models.Payment)) *MockPaymentRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Payment))
	})
	return _c
}

func (_c *MockPaymentRepository_Update_Call) Return(_a0 error) *MockPaymentRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentRepository_Update_Call) RunAndReturn(run func(*models.Payment) error) *MockPaymentRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentRepository creates a new instance of MockPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentRepository {
	mock := &MockPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
