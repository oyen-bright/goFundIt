// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPayoutRepository is an autogenerated mock type for the PayoutRepository type
type MockPayoutRepository struct {
	mock.Mock
}

type MockPayoutRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPayoutRepository) EXPECT() *MockPayoutRepository_Expecter {
	return &MockPayoutRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: payout
func (_m *MockPayoutRepository) Create(payout *models.Payout) error {
	ret := _m.Called(payout)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Payout) error); ok {
		r0 = rf(payout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPayoutRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPayoutRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - payout *models.Payout
func (_e *MockPayoutRepository_Expecter) Create(payout interface{}) *MockPayoutRepository_Create_Call {
	return &MockPayoutRepository_Create_Call{Call: _e.mock.On("Create", payout)}
}

func (_c *MockPayoutRepository_Create_Call) Run(run func(payout *models.Payout)) *MockPayoutRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Payout))
	})
	return _c
}

func (_c *MockPayoutRepository_Create_Call) Return(_a0 error) *MockPayoutRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPayoutRepository_Create_Call) RunAndReturn(run func(*models.Payout) error) *MockPayoutRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCampaignID provides a mock function with given fields: campaignID, limit, offset
func (_m *MockPayoutRepository) GetByCampaignID(campaignID string, limit int, offset int) ([]models.Payout, int64, error) {
	ret := _m.Called(campaignID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByCampaignID")
	}

	var r0 []models.Payout
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]models.Payout, int64, error)); ok {
		return rf(campaignID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []models.Payout); ok {
		r0 = rf(campaignID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Payout)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(campaignID, limit, offset)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(campaignID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPayoutRepository_GetByCampaignID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCampaignID'
type MockPayoutRepository_GetByCampaignID_Call struct {
	*mock.Call
}

// GetByCampaignID is a helper method to define mock.On call
//   - campaignID string
//   - limit int
//   - offset int
func (_e *MockPayoutRepository_Expecter) GetByCampaignID(campaignID interface{}, limit interface{}, offset interface{}) *MockPayoutRepository_GetByCampaignID_Call {
	return &MockPayoutRepository_GetByCampaignID_Call{Call: _e.mock.On("GetByCampaignID", campaignID, limit, offset)}
}

func (_c *MockPayoutRepository_GetByCampaignID_Call) Run(run func(campaignID string, limit int, offset int)) *MockPayoutRepository_GetByCampaignID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockPayoutRepository_GetByCampaignID_Call) Return(_a0 []models.Payout, _a1 int64, _a2 error) *MockPayoutRepository_GetByCampaignID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPayoutRepository_GetByCampaignID_Call) RunAndReturn(run func(string, int, int) ([]models.Payout, int64, error)) *MockPayoutRepository_GetByCampaignID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockPayoutRepository) GetByID(id string) (*models.Payout, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Payout
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Payout, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Payout); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payout)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPayoutRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPayoutRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockPayoutRepository_Expecter) GetByID(id interface{}) *MockPayoutRepository_GetByID_Call {
	return &MockPayoutRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockPayoutRepository_GetByID_Call) Run(run func(id string)) *MockPayoutRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPayoutRepository_GetByID_Call) Return(_a0 *models.Payout, _a1 error) *MockPayoutRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPayoutRepository_GetByID_Call) RunAndReturn(run func(string) (*models.Payout, error)) *MockPayoutRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: payout
func (_m *MockPayoutRepository) Update(payout *models.Payout) error {
	ret := _m.Called(payout)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Payout) error); ok {
		r0 = rf(payout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPayoutRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPayoutRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - payout *models.Payout
func (_e *MockPayoutRepository_Expecter) Update(payout interface{}) *MockPayoutRepository_Update_Call {
	return &MockPayoutRepository_Update_Call{Call: _e.mock.On("Update", payout)}
}

func (_c *MockPayoutRepository_Update_Call) Run(run func(payout *models.Payout)) *MockPayoutRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Payout))
	})
	return _c
}

func (_c *MockPayoutRepository_Update_Call) Return(_a0 error) *MockPayoutRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPayoutRepository_Update_Call) RunAndReturn(run func(*models.Payout) error) *MockPayoutRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPayoutRepository creates a new instance of MockPayoutRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPayoutRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPayoutRepository {
	mock := &MockPayoutRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
