// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateMultiple provides a mock function with given fields: users
func (_m *MockAuthRepository) CreateMultiple(users []models.User) ([]models.User, error) {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiple")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]models.User) ([]models.User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]models.User) []models.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]models.User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_CreateMultiple_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMultiple'
type MockAuthRepository_CreateMultiple_Call struct {
	*mock.Call
}

// CreateMultiple is a helper method to define mock.On call
//   - users []models.User
func (_e *MockAuthRepository_Expecter) CreateMultiple(users interface{}) *MockAuthRepository_CreateMultiple_Call {
	return &MockAuthRepository_CreateMultiple_Call{Call: _e.mock.On("CreateMultiple", users)}
}

func (_c *MockAuthRepository_CreateMultiple_Call) Run(run func(users []models.User)) *MockAuthRepository_CreateMultiple_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.User))
	})
	return _c
}

func (_c *MockAuthRepository_CreateMultiple_Call) Return(_a0 []models.User, _a1 error) *MockAuthRepository_CreateMultiple_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_CreateMultiple_Call) RunAndReturn(run func([]models.User) ([]models.User, error)) *MockAuthRepository_CreateMultiple_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: user
func (_m *MockAuthRepository) Delete(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAuthRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - user *models.User
func (_e *MockAuthRepository_Expecter) Delete(user interface{}) *MockAuthRepository_Delete_Call {
	return &MockAuthRepository_Delete_Call{Call: _e.mock.On("Delete", user)}
}

func (_c *MockAuthRepository_Delete_Call) Run(run func(user *models.User)) *MockAuthRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockAuthRepository_Delete_Call) Return(_a0 error) *MockAuthRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_Delete_Call) RunAndReturn(run func(*models.User) error) *MockAuthRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: email
func (_m *MockAuthRepository) FindByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockAuthRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockAuthRepository_Expecter) FindByEmail(email interface{}) *MockAuthRepository_FindByEmail_Call {
	return &MockAuthRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *MockAuthRepository_FindByEmail_Call) Run(run func(email string)) *MockAuthRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_FindByEmail_Call) Return(_a0 *models.User, _a1 error) *MockAuthRepository_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_FindByEmail_Call) RunAndReturn(run func(string) (*models.User, error)) *MockAuthRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByHandle provides a mock function with given fields: handle
func (_m *MockAuthRepository) FindByHandle(handle string) (*models.User, error) {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for FindByHandle")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(handle)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(handle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_FindByHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByHandle'
type MockAuthRepository_FindByHandle_Call struct {
	*mock.Call
}

// FindByHandle is a helper method to define mock.On call
//   - handle string
func (_e *MockAuthRepository_Expecter) FindByHandle(handle interface{}) *MockAuthRepository_FindByHandle_Call {
	return &MockAuthRepository_FindByHandle_Call{Call: _e.mock.On("FindByHandle", handle)}
}

func (_c *MockAuthRepository_FindByHandle_Call) Run(run func(handle string)) *MockAuthRepository_FindByHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_FindByHandle_Call) Return(_a0 *models.User, _a1 error) *MockAuthRepository_FindByHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_FindByHandle_Call) RunAndReturn(run func(string) (*models.User, error)) *MockAuthRepository_FindByHandle_Call {
	_c.Call.Return(run)
	return _c
}

// FindExistingAndNonExistingUsers provides a mock function with given fields: emails
func (_m *MockAuthRepository) FindExistingAndNonExistingUsers(emails []string) ([]models.User, []string, error) {
	ret := _m.Called(emails)

	if len(ret) == 0 {
		panic("no return value specified for FindExistingAndNonExistingUsers")
	}

	var r0 []models.User
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func([]string) ([]models.User, []string, error)); ok {
		return rf(emails)
	}
	if rf, ok := ret.Get(0).(func([]string) []models.User); ok {
		r0 = rf(emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) []string); ok {
		r1 = rf(emails)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func([]string) error); ok {
		r2 = rf(emails)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthRepository_FindExistingAndNonExistingUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindExistingAndNonExistingUsers'
type MockAuthRepository_FindExistingAndNonExistingUsers_Call struct {
	*mock.Call
}

// FindExistingAndNonExistingUsers is a helper method to define mock.On call
//   - emails []string
func (_e *MockAuthRepository_Expecter) FindExistingAndNonExistingUsers(emails interface{}) *MockAuthRepository_FindExistingAndNonExistingUsers_Call {
	return &MockAuthRepository_FindExistingAndNonExistingUsers_Call{Call: _e.mock.On("FindExistingAndNonExistingUsers", emails)}
}

func (_c *MockAuthRepository_FindExistingAndNonExistingUsers_Call) Run(run func(emails []string)) *MockAuthRepository_FindExistingAndNonExistingUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockAuthRepository_FindExistingAndNonExistingUsers_Call) Return(existing []models.User, nonExisting []string, err error) *MockAuthRepository_FindExistingAndNonExistingUsers_Call {
	_c.Call.Return(existing, nonExisting, err)
	return _c
}

func (_c *MockAuthRepository_FindExistingAndNonExistingUsers_Call) RunAndReturn(run func([]string) ([]models.User, []string, error)) *MockAuthRepository_FindExistingAndNonExistingUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *MockAuthRepository) GetAll() ([]models.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockAuthRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockAuthRepository_Expecter) GetAll() *MockAuthRepository_GetAll_Call {
	return &MockAuthRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockAuthRepository_GetAll_Call) Run(run func()) *MockAuthRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthRepository_GetAll_Call) Return(_a0 []models.User, _a1 error) *MockAuthRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_GetAll_Call) RunAndReturn(run func() ([]models.User, error)) *MockAuthRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: user
func (_m *MockAuthRepository) Save(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockAuthRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user *models.User
func (_e *MockAuthRepository_Expecter) Save(user interface{}) *MockAuthRepository_Save_Call {
	return &MockAuthRepository_Save_Call{Call: _e.mock.On("Save", user)}
}

func (_c *MockAuthRepository_Save_Call) Run(run func(user *models.User)) *MockAuthRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockAuthRepository_Save_Call) Return(_a0 error) *MockAuthRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_Save_Call) RunAndReturn(run func(*models.User) error) *MockAuthRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
