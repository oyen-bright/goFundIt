// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockCommentRepository is an autogenerated mock type for the CommentRepository type
type MockCommentRepository struct {
	mock.Mock
}

type MockCommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentRepository) EXPECT() *MockCommentRepository_Expecter {
	return &MockCommentRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: comment
func (_m *MockCommentRepository) Create(comment *models.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCommentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - comment *models.Comment
func (_e *MockCommentRepository_Expecter) Create(comment interface{}) *MockCommentRepository_Create_Call {
	return &MockCommentRepository_Create_Call{Call: _e.mock.On("Create", comment)}
}

func (_c *MockCommentRepository_Create_Call) Run(run func(comment *models.Comment)) *MockCommentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Comment))
	})
	return _c
}

func (_c *MockCommentRepository_Create_Call) Return(_a0 error) *MockCommentRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_Create_Call) RunAndReturn(run func(*models.Comment) error) *MockCommentRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: commentID
func (_m *MockCommentRepository) Delete(commentID string) error {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCommentRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - commentID string
func (_e *MockCommentRepository_Expecter) Delete(commentID interface{}) *MockCommentRepository_Delete_Call {
	return &MockCommentRepository_Delete_Call{Call: _e.mock.On("Delete", commentID)}
}

func (_c *MockCommentRepository_Delete_Call) Run(run func(commentID string)) *MockCommentRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommentRepository_Delete_Call) Return(_a0 error) *MockCommentRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_Delete_Call) RunAndReturn(run func(string) error) *MockCommentRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindReplies provides a mock function with given fields: commentID
func (_m *MockCommentRepository) FindReplies(commentID string) ([]models.Comment, error) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for FindReplies")
	}

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Comment, error)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Comment); ok {
		r0 = rf(commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepository_FindReplies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindReplies'
type MockCommentRepository_FindReplies_Call struct {
	*mock.Call
}

// FindReplies is a helper method to define mock.On call
//   - commentID string
func (_e *MockCommentRepository_Expecter) FindReplies(commentID interface{}) *MockCommentRepository_FindReplies_Call {
	return &MockCommentRepository_FindReplies_Call{Call: _e.mock.On("FindReplies", commentID)}
}

func (_c *MockCommentRepository_FindReplies_Call) Run(run func(commentID string)) *MockCommentRepository_FindReplies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommentRepository_FindReplies_Call) Return(_a0 []models.Comment, _a1 error) *MockCommentRepository_FindReplies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepository_FindReplies_Call) RunAndReturn(run func(string) ([]models.Comment, error)) *MockCommentRepository_FindReplies_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: commentID
func (_m *MockCommentRepository) Get(commentID string) (models.Comment, error) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Comment, error)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(string) models.Comment); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCommentRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - commentID string
func (_e *MockCommentRepository_Expecter) Get(commentID interface{}) *MockCommentRepository_Get_Call {
	return &MockCommentRepository_Get_Call{Call: _e.mock.On("Get", commentID)}
}

func (_c *MockCommentRepository_Get_Call) Run(run func(commentID string)) *MockCommentRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCommentRepository_Get_Call) Return(_a0 models.Comment, _a1 error) *MockCommentRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepository_Get_Call) RunAndReturn(run func(string) (models.Comment, error)) *MockCommentRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByActivityID provides a mock function with given fields: activityID
func (_m *MockCommentRepository) GetByActivityID(activityID uint) ([]models.Comment, error) {
	ret := _m.Called(activityID)

	if len(ret) == 0 {
		panic("no return value specified for GetByActivityID")
	}

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Comment, error)); ok {
		return rf(activityID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Comment); ok {
		r0 = rf(activityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(activityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepository_GetByActivityID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByActivityID'
type MockCommentRepository_GetByActivityID_Call struct {
	*mock.Call
}

// GetByActivityID is a helper method to define mock.On call
//   - activityID uint
func (_e *MockCommentRepository_Expecter) GetByActivityID(activityID interface{}) *MockCommentRepository_GetByActivityID_Call {
	return &MockCommentRepository_GetByActivityID_Call{Call: _e.mock.On("GetByActivityID", activityID)}
}

func (_c *MockCommentRepository_GetByActivityID_Call) Run(run func(activityID uint)) *MockCommentRepository_GetByActivityID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockCommentRepository_GetByActivityID_Call) Return(_a0 []models.Comment, _a1 error) *MockCommentRepository_GetByActivityID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepository_GetByActivityID_Call) RunAndReturn(run func(uint) ([]models.Comment, error)) *MockCommentRepository_GetByActivityID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: comment
func (_m *MockCommentRepository) Update(comment *models.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCommentRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - comment *models.Comment
func (_e *MockCommentRepository_Expecter) Update(comment interface{}) *MockCommentRepository_Update_Call {
	return &MockCommentRepository_Update_Call{Call: _e.mock.On("Update", comment)}
}

func (_c *MockCommentRepository_Update_Call) Run(run func(comment *models.Comment)) *MockCommentRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Comment))
	})
	return _c
}

func (_c *MockCommentRepository_Update_Call) Return(_a0 error) *MockCommentRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_Update_Call) RunAndReturn(run func(*models.Comment) error) *MockCommentRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentRepository creates a new instance of MockCommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentRepository {
	mock := &MockCommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
