// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ContributorRepository is an autogenerated mock type for the ContributorRepository type
type ContributorRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: contribution
func (_m *ContributorRepository) Create(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: contribution
func (_m *ContributorRepository) Delete(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContributorById provides a mock function with given fields: contributorID
func (_m *ContributorRepository) GetContributorById(contributorID uint) (models.Contributor, error) {
	ret := _m.Called(contributorID)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorById")
	}

	var r0 models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Contributor, error)); ok {
		return rf(contributorID)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Contributor); ok {
		r0 = rf(contributorID)
	} else {
		r0 = ret.Get(0).(models.Contributor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(contributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContributorByUserHandle provides a mock function with given fields: userHandle
func (_m *ContributorRepository) GetContributorByUserHandle(userHandle uint) (models.Contributor, error) {
	ret := _m.Called(userHandle)

	if len(ret) == 0 {
		panic("no return value specified for GetContributorByUserHandle")
	}

	var r0 models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.Contributor, error)); ok {
		return rf(userHandle)
	}
	if rf, ok := ret.Get(0).(func(uint) models.Contributor); ok {
		r0 = rf(userHandle)
	} else {
		r0 = ret.Get(0).(models.Contributor)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userHandle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContributors provides a mock function with given fields: campaignID
func (_m *ContributorRepository) GetContributors(campaignID string) ([]models.Contributor, error) {
	ret := _m.Called(campaignID)

	if len(ret) == 0 {
		panic("no return value specified for GetContributors")
	}

	var r0 []models.Contributor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Contributor, error)); ok {
		return rf(campaignID)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Contributor); ok {
		r0 = rf(campaignID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Contributor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(campaignID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailsOfExistingContributors provides a mock function with given fields: emails
func (_m *ContributorRepository) GetEmailsOfExistingContributors(emails []string) ([]string, error) {
	ret := _m.Called(emails)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsOfExistingContributors")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(emails)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPayment provides a mock function with given fields: paymentID
func (_m *ContributorRepository) ProcessPayment(paymentID string) error {
	ret := _m.Called(paymentID)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefundPayment provides a mock function with given fields: paymentID
func (_m *ContributorRepository) RefundPayment(paymentID string) error {
	ret := _m.Called(paymentID)

	if len(ret) == 0 {
		panic("no return value specified for RefundPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(paymentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: contribution
func (_m *ContributorRepository) Update(contribution *models.Contributor) error {
	ret := _m.Called(contribution)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Contributor) error); ok {
		r0 = rf(contribution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContributorRepository creates a new instance of ContributorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContributorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContributorRepository {
	mock := &ContributorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
