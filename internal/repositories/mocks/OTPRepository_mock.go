// Code generated by mockery v2.50.0. DO NOT EDIT.

package interfaces

import (
	models "github.com/oyen-bright/goFundIt/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockOTPRepository is an autogenerated mock type for the OTPRepository type
type MockOTPRepository struct {
	mock.Mock
}

type MockOTPRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOTPRepository) EXPECT() *MockOTPRepository_Expecter {
	return &MockOTPRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: otp
func (_m *MockOTPRepository) Add(otp *models.Otp) error {
	ret := _m.Called(otp)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Otp) error); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOTPRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockOTPRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - otp *models.Otp
func (_e *MockOTPRepository_Expecter) Add(otp interface{}) *MockOTPRepository_Add_Call {
	return &MockOTPRepository_Add_Call{Call: _e.mock.On("Add", otp)}
}

func (_c *MockOTPRepository_Add_Call) Run(run func(otp *models.Otp)) *MockOTPRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Otp))
	})
	return _c
}

func (_c *MockOTPRepository_Add_Call) Return(_a0 error) *MockOTPRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOTPRepository_Add_Call) RunAndReturn(run func(*models.Otp) error) *MockOTPRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: otp
func (_m *MockOTPRepository) Delete(otp *models.Otp) error {
	ret := _m.Called(otp)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Otp) error); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOTPRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockOTPRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - otp *models.Otp
func (_e *MockOTPRepository_Expecter) Delete(otp interface{}) *MockOTPRepository_Delete_Call {
	return &MockOTPRepository_Delete_Call{Call: _e.mock.On("Delete", otp)}
}

func (_c *MockOTPRepository_Delete_Call) Run(run func(otp *models.Otp)) *MockOTPRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Otp))
	})
	return _c
}

func (_c *MockOTPRepository_Delete_Call) Return(_a0 error) *MockOTPRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOTPRepository_Delete_Call) RunAndReturn(run func(*models.Otp) error) *MockOTPRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmailAndReference provides a mock function with given fields: email, requestId
func (_m *MockOTPRepository) GetByEmailAndReference(email string, requestId string) (*models.Otp, error) {
	ret := _m.Called(email, requestId)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmailAndReference")
	}

	var r0 *models.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Otp, error)); ok {
		return rf(email, requestId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Otp); ok {
		r0 = rf(email, requestId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Otp)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, requestId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOTPRepository_GetByEmailAndReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmailAndReference'
type MockOTPRepository_GetByEmailAndReference_Call struct {
	*mock.Call
}

// GetByEmailAndReference is a helper method to define mock.On call
//   - email string
//   - requestId string
func (_e *MockOTPRepository_Expecter) GetByEmailAndReference(email interface{}, requestId interface{}) *MockOTPRepository_GetByEmailAndReference_Call {
	return &MockOTPRepository_GetByEmailAndReference_Call{Call: _e.mock.On("GetByEmailAndReference", email, requestId)}
}

func (_c *MockOTPRepository_GetByEmailAndReference_Call) Run(run func(email string, requestId string)) *MockOTPRepository_GetByEmailAndReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockOTPRepository_GetByEmailAndReference_Call) Return(_a0 *models.Otp, _a1 error) *MockOTPRepository_GetByEmailAndReference_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOTPRepository_GetByEmailAndReference_Call) RunAndReturn(run func(string, string) (*models.Otp, error)) *MockOTPRepository_GetByEmailAndReference_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateOtherOTPs provides a mock function with given fields: email, code, requestId
func (_m *MockOTPRepository) InvalidateOtherOTPs(email string, code string, requestId string) error {
	ret := _m.Called(email, code, requestId)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateOtherOTPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, code, requestId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOTPRepository_InvalidateOtherOTPs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateOtherOTPs'
type MockOTPRepository_InvalidateOtherOTPs_Call struct {
	*mock.Call
}

// InvalidateOtherOTPs is a helper method to define mock.On call
//   - email string
//   - code string
//   - requestId string
func (_e *MockOTPRepository_Expecter) InvalidateOtherOTPs(email interface{}, code interface{}, requestId interface{}) *MockOTPRepository_InvalidateOtherOTPs_Call {
	return &MockOTPRepository_InvalidateOtherOTPs_Call{Call: _e.mock.On("InvalidateOtherOTPs", email, code, requestId)}
}

func (_c *MockOTPRepository_InvalidateOtherOTPs_Call) Run(run func(email string, code string, requestId string)) *MockOTPRepository_InvalidateOtherOTPs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOTPRepository_InvalidateOtherOTPs_Call) Return(_a0 error) *MockOTPRepository_InvalidateOtherOTPs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOTPRepository_InvalidateOtherOTPs_Call) RunAndReturn(run func(string, string, string) error) *MockOTPRepository_InvalidateOtherOTPs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOTPRepository creates a new instance of MockOTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOTPRepository {
	mock := &MockOTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
