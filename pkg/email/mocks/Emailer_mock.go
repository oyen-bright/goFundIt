// Code generated by mockery v2.50.0. DO NOT EDIT.

package email

import (
	email "github.com/oyen-bright/goFundIt/pkg/email"
	mock "github.com/stretchr/testify/mock"
)

// MockEmailer is an autogenerated mock type for the Emailer type
type MockEmailer struct {
	mock.Mock
}

type MockEmailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailer) EXPECT() *MockEmailer_Expecter {
	return &MockEmailer_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: _a0
func (_m *MockEmailer) SendEmail(_a0 email.Email) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(email.Email) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailer_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockEmailer_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - _a0 email.Email
func (_e *MockEmailer_Expecter) SendEmail(_a0 interface{}) *MockEmailer_SendEmail_Call {
	return &MockEmailer_SendEmail_Call{Call: _e.mock.On("SendEmail", _a0)}
}

func (_c *MockEmailer_SendEmail_Call) Run(run func(_a0 email.Email)) *MockEmailer_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(email.Email))
	})
	return _c
}

func (_c *MockEmailer_SendEmail_Call) Return(_a0 error) *MockEmailer_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailer_SendEmail_Call) RunAndReturn(run func(email.Email) error) *MockEmailer_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmailTemplate provides a mock function with given fields: _a0
func (_m *MockEmailer) SendEmailTemplate(_a0 email.EmailTemplate) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(email.EmailTemplate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailer_SendEmailTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailTemplate'
type MockEmailer_SendEmailTemplate_Call struct {
	*mock.Call
}

// SendEmailTemplate is a helper method to define mock.On call
//   - _a0 email.EmailTemplate
func (_e *MockEmailer_Expecter) SendEmailTemplate(_a0 interface{}) *MockEmailer_SendEmailTemplate_Call {
	return &MockEmailer_SendEmailTemplate_Call{Call: _e.mock.On("SendEmailTemplate", _a0)}
}

func (_c *MockEmailer_SendEmailTemplate_Call) Run(run func(_a0 email.EmailTemplate)) *MockEmailer_SendEmailTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(email.EmailTemplate))
	})
	return _c
}

func (_c *MockEmailer_SendEmailTemplate_Call) Return(_a0 error) *MockEmailer_SendEmailTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailer_SendEmailTemplate_Call) RunAndReturn(run func(email.EmailTemplate) error) *MockEmailer_SendEmailTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailer creates a new instance of MockEmailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailer {
	mock := &MockEmailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
