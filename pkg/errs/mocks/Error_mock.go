// Code generated by mockery v2.50.0. DO NOT EDIT.

package errs

import (
	errs "github.com/oyen-bright/goFundIt/pkg/errs"
	logger "github.com/oyen-bright/goFundIt/pkg/logger"

	mock "github.com/stretchr/testify/mock"
)

// MockError is an autogenerated mock type for the Error type
type MockError struct {
	mock.Mock
}

type MockError_Expecter struct {
	mock *mock.Mock
}

func (_m *MockError) EXPECT() *MockError_Expecter {
	return &MockError_Expecter{mock: &_m.Mock}
}

// Code provides a mock function with no fields
func (_m *MockError) Code() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Code")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockError_Code_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Code'
type MockError_Code_Call struct {
	*mock.Call
}

// Code is a helper method to define mock.On call
func (_e *MockError_Expecter) Code() *MockError_Code_Call {
	return &MockError_Code_Call{Call: _e.mock.On("Code")}
}

func (_c *MockError_Code_Call) Run(run func()) *MockError_Code_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Code_Call) Return(_a0 int) *MockError_Code_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Code_Call) RunAndReturn(run func() int) *MockError_Code_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with no fields
func (_m *MockError) Data() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockError_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockError_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockError_Expecter) Data() *MockError_Data_Call {
	return &MockError_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MockError_Data_Call) Run(run func()) *MockError_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Data_Call) Return(_a0 interface{}) *MockError_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Data_Call) RunAndReturn(run func() interface{}) *MockError_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with no fields
func (_m *MockError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *MockError_Expecter) Error() *MockError_Error_Call {
	return &MockError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *MockError_Error_Call) Run(run func()) *MockError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Error_Call) Return(_a0 string) *MockError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Error_Call) RunAndReturn(run func() string) *MockError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Errors provides a mock function with no fields
func (_m *MockError) Errors() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockError_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type MockError_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *MockError_Expecter) Errors() *MockError_Errors_Call {
	return &MockError_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *MockError_Errors_Call) Run(run func()) *MockError_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Errors_Call) Return(_a0 interface{}) *MockError_Errors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Errors_Call) RunAndReturn(run func() interface{}) *MockError_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: _a0, additionalContext
func (_m *MockError) Log(_a0 logger.Logger, additionalContext ...interface{}) errs.Error {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, additionalContext...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func(logger.Logger, ...interface{}) errs.Error); ok {
		r0 = rf(_a0, additionalContext...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// MockError_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockError_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - _a0 logger.Logger
//   - additionalContext ...interface{}
func (_e *MockError_Expecter) Log(_a0 interface{}, additionalContext ...interface{}) *MockError_Log_Call {
	return &MockError_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{_a0}, additionalContext...)...)}
}

func (_c *MockError_Log_Call) Run(run func(_a0 logger.Logger, additionalContext ...interface{})) *MockError_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(logger.Logger), variadicArgs...)
	})
	return _c
}

func (_c *MockError_Log_Call) Return(_a0 errs.Error) *MockError_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Log_Call) RunAndReturn(run func(logger.Logger, ...interface{}) errs.Error) *MockError_Log_Call {
	_c.Call.Return(run)
	return _c
}

// Message provides a mock function with no fields
func (_m *MockError) Message() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Message")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockError_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type MockError_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *MockError_Expecter) Message() *MockError_Message_Call {
	return &MockError_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *MockError_Message_Call) Run(run func()) *MockError_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Message_Call) Return(_a0 string) *MockError_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Message_Call) RunAndReturn(run func() string) *MockError_Message_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockError) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockError_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockError_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockError_Expecter) String() *MockError_String_Call {
	return &MockError_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockError_String_Call) Run(run func()) *MockError_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_String_Call) Return(_a0 string) *MockError_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_String_Call) RunAndReturn(run func() string) *MockError_String_Call {
	_c.Call.Return(run)
	return _c
}

// Unwrap provides a mock function with no fields
func (_m *MockError) Unwrap() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unwrap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockError_Unwrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unwrap'
type MockError_Unwrap_Call struct {
	*mock.Call
}

// Unwrap is a helper method to define mock.On call
func (_e *MockError_Expecter) Unwrap() *MockError_Unwrap_Call {
	return &MockError_Unwrap_Call{Call: _e.mock.On("Unwrap")}
}

func (_c *MockError_Unwrap_Call) Run(run func()) *MockError_Unwrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_Unwrap_Call) Return(_a0 error) *MockError_Unwrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_Unwrap_Call) RunAndReturn(run func() error) *MockError_Unwrap_Call {
	_c.Call.Return(run)
	return _c
}

// WithStack provides a mock function with no fields
func (_m *MockError) WithStack() errs.Error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for WithStack")
	}

	var r0 errs.Error
	if rf, ok := ret.Get(0).(func() errs.Error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errs.Error)
		}
	}

	return r0
}

// MockError_WithStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStack'
type MockError_WithStack_Call struct {
	*mock.Call
}

// WithStack is a helper method to define mock.On call
func (_e *MockError_Expecter) WithStack() *MockError_WithStack_Call {
	return &MockError_WithStack_Call{Call: _e.mock.On("WithStack")}
}

func (_c *MockError_WithStack_Call) Run(run func()) *MockError_WithStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockError_WithStack_Call) Return(_a0 errs.Error) *MockError_WithStack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockError_WithStack_Call) RunAndReturn(run func() errs.Error) *MockError_WithStack_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockError creates a new instance of MockError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockError(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockError {
	mock := &MockError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
