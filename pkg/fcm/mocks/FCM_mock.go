// Code generated by mockery v2.50.0. DO NOT EDIT.

package fcm

import (
	context "context"

	fcm "github.com/oyen-bright/goFundIt/pkg/fcm"
	mock "github.com/stretchr/testify/mock"
)

// MockFCM is an autogenerated mock type for the FCM type
type MockFCM struct {
	mock.Mock
}

type MockFCM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFCM) EXPECT() *MockFCM_Expecter {
	return &MockFCM_Expecter{mock: &_m.Mock}
}

// SendMulticastNotification provides a mock function with given fields: ctx, tokens, notification
func (_m *MockFCM) SendMulticastNotification(ctx context.Context, tokens []string, notification fcm.NotificationData) error {
	ret := _m.Called(ctx, tokens, notification)

	if len(ret) == 0 {
		panic("no return value specified for SendMulticastNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, fcm.NotificationData) error); ok {
		r0 = rf(ctx, tokens, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFCM_SendMulticastNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMulticastNotification'
type MockFCM_SendMulticastNotification_Call struct {
	*mock.Call
}

// SendMulticastNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens []string
//   - notification fcm.NotificationData
func (_e *MockFCM_Expecter) SendMulticastNotification(ctx interface{}, tokens interface{}, notification interface{}) *MockFCM_SendMulticastNotification_Call {
	return &MockFCM_SendMulticastNotification_Call{Call: _e.mock.On("SendMulticastNotification", ctx, tokens, notification)}
}

func (_c *MockFCM_SendMulticastNotification_Call) Run(run func(ctx context.Context, tokens []string, notification fcm.NotificationData)) *MockFCM_SendMulticastNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(fcm.NotificationData))
	})
	return _c
}

func (_c *MockFCM_SendMulticastNotification_Call) Return(_a0 error) *MockFCM_SendMulticastNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFCM_SendMulticastNotification_Call) RunAndReturn(run func(context.Context, []string, fcm.NotificationData) error) *MockFCM_SendMulticastNotification_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotification provides a mock function with given fields: ctx, token, notification
func (_m *MockFCM) SendNotification(ctx context.Context, token string, notification fcm.NotificationData) error {
	ret := _m.Called(ctx, token, notification)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, fcm.NotificationData) error); ok {
		r0 = rf(ctx, token, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFCM_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type MockFCM_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - notification fcm.NotificationData
func (_e *MockFCM_Expecter) SendNotification(ctx interface{}, token interface{}, notification interface{}) *MockFCM_SendNotification_Call {
	return &MockFCM_SendNotification_Call{Call: _e.mock.On("SendNotification", ctx, token, notification)}
}

func (_c *MockFCM_SendNotification_Call) Run(run func(ctx context.Context, token string, notification fcm.NotificationData)) *MockFCM_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(fcm.NotificationData))
	})
	return _c
}

func (_c *MockFCM_SendNotification_Call) Return(_a0 error) *MockFCM_SendNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFCM_SendNotification_Call) RunAndReturn(run func(context.Context, string, fcm.NotificationData) error) *MockFCM_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFCM creates a new instance of MockFCM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFCM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFCM {
	mock := &MockFCM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
