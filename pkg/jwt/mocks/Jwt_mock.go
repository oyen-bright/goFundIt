// Code generated by mockery v2.50.0. DO NOT EDIT.

package jwt

import (
	jwt "github.com/oyen-bright/goFundIt/pkg/jwt"
	mock "github.com/stretchr/testify/mock"
)

// MockJwt is an autogenerated mock type for the Jwt type
type MockJwt struct {
	mock.Mock
}

type MockJwt_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJwt) EXPECT() *MockJwt_Expecter {
	return &MockJwt_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: userID, email, handle
func (_m *MockJwt) GenerateToken(userID uint, email string, handle string) (string, error) {
	ret := _m.Called(userID, email, handle)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) (string, error)); ok {
		return rf(userID, email, handle)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) string); ok {
		r0 = rf(userID, email, handle)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(userID, email, handle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJwt_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJwt_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userID uint
//   - email string
//   - handle string
func (_e *MockJwt_Expecter) GenerateToken(userID interface{}, email interface{}, handle interface{}) *MockJwt_GenerateToken_Call {
	return &MockJwt_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userID, email, handle)}
}

func (_c *MockJwt_GenerateToken_Call) Run(run func(userID uint, email string, handle string)) *MockJwt_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockJwt_GenerateToken_Call) Return(_a0 string, _a1 error) *MockJwt_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJwt_GenerateToken_Call) RunAndReturn(run func(uint, string, string) (string, error)) *MockJwt_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *MockJwt) ValidateToken(tokenString string) (*jwt.Claims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Claims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Claims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJwt_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJwt_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockJwt_Expecter) ValidateToken(tokenString interface{}) *MockJwt_ValidateToken_Call {
	return &MockJwt_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockJwt_ValidateToken_Call) Run(run func(tokenString string)) *MockJwt_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJwt_ValidateToken_Call) Return(_a0 *jwt.Claims, _a1 error) *MockJwt_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJwt_ValidateToken_Call) RunAndReturn(run func(string) (*jwt.Claims, error)) *MockJwt_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJwt creates a new instance of MockJwt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwt(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwt {
	mock := &MockJwt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
