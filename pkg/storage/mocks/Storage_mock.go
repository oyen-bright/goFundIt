// Code generated by mockery v2.50.0. DO NOT EDIT.

package storage

import mock "github.com/stretchr/testify/mock"

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// DeleteFile provides a mock function with given fields: id
func (_m *MockStorage) DeleteFile(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockStorage_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - id string
func (_e *MockStorage_Expecter) DeleteFile(id interface{}) *MockStorage_DeleteFile_Call {
	return &MockStorage_DeleteFile_Call{Call: _e.mock.On("DeleteFile", id)}
}

func (_c *MockStorage_DeleteFile_Call) Run(run func(id string)) *MockStorage_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStorage_DeleteFile_Call) Return(_a0 error) *MockStorage_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_DeleteFile_Call) RunAndReturn(run func(string) error) *MockStorage_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: file, folderPath
func (_m *MockStorage) UploadFile(file string, folderPath string) (string, string, error) {
	ret := _m.Called(file, folderPath)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (string, string, error)); ok {
		return rf(file, folderPath)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(file, folderPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(file, folderPath)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(file, folderPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockStorage_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockStorage_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - file string
//   - folderPath string
func (_e *MockStorage_Expecter) UploadFile(file interface{}, folderPath interface{}) *MockStorage_UploadFile_Call {
	return &MockStorage_UploadFile_Call{Call: _e.mock.On("UploadFile", file, folderPath)}
}

func (_c *MockStorage_UploadFile_Call) Run(run func(file string, folderPath string)) *MockStorage_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_UploadFile_Call) Return(url string, id string, err error) *MockStorage_UploadFile_Call {
	_c.Call.Return(url, id, err)
	return _c
}

func (_c *MockStorage_UploadFile_Call) RunAndReturn(run func(string, string) (string, string, error)) *MockStorage_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
