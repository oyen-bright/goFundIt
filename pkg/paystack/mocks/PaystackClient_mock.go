// Code generated by mockery v2.50.0. DO NOT EDIT.

package paystack

import (
	paystack "github.com/oyen-bright/goFundIt/pkg/paystack"
	mock "github.com/stretchr/testify/mock"
)

// MockPaystackClient is an autogenerated mock type for the PaystackClient type
type MockPaystackClient struct {
	mock.Mock
}

type MockPaystackClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaystackClient) EXPECT() *MockPaystackClient_Expecter {
	return &MockPaystackClient_Expecter{mock: &_m.Mock}
}

// CreateRecipient provides a mock function with given fields: recipient
func (_m *MockPaystackClient) CreateRecipient(recipient paystack.Recipient) (*paystack.RecipientResponse, error) {
	ret := _m.Called(recipient)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipient")
	}

	var r0 *paystack.RecipientResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(paystack.Recipient) (*paystack.RecipientResponse, error)); ok {
		return rf(recipient)
	}
	if rf, ok := ret.Get(0).(func(paystack.Recipient) *paystack.RecipientResponse); ok {
		r0 = rf(recipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.RecipientResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(paystack.Recipient) error); ok {
		r1 = rf(recipient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_CreateRecipient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRecipient'
type MockPaystackClient_CreateRecipient_Call struct {
	*mock.Call
}

// CreateRecipient is a helper method to define mock.On call
//   - recipient paystack.Recipient
func (_e *MockPaystackClient_Expecter) CreateRecipient(recipient interface{}) *MockPaystackClient_CreateRecipient_Call {
	return &MockPaystackClient_CreateRecipient_Call{Call: _e.mock.On("CreateRecipient", recipient)}
}

func (_c *MockPaystackClient_CreateRecipient_Call) Run(run func(recipient paystack.Recipient)) *MockPaystackClient_CreateRecipient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(paystack.Recipient))
	})
	return _c
}

func (_c *MockPaystackClient_CreateRecipient_Call) Return(_a0 *paystack.RecipientResponse, _a1 error) *MockPaystackClient_CreateRecipient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_CreateRecipient_Call) RunAndReturn(run func(paystack.Recipient) (*paystack.RecipientResponse, error)) *MockPaystackClient_CreateRecipient_Call {
	_c.Call.Return(run)
	return _c
}

// FinalizeTransfer provides a mock function with given fields: transferCode
func (_m *MockPaystackClient) FinalizeTransfer(transferCode string) (*paystack.FinalizeTransferResponse, error) {
	ret := _m.Called(transferCode)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeTransfer")
	}

	var r0 *paystack.FinalizeTransferResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*paystack.FinalizeTransferResponse, error)); ok {
		return rf(transferCode)
	}
	if rf, ok := ret.Get(0).(func(string) *paystack.FinalizeTransferResponse); ok {
		r0 = rf(transferCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.FinalizeTransferResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transferCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_FinalizeTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalizeTransfer'
type MockPaystackClient_FinalizeTransfer_Call struct {
	*mock.Call
}

// FinalizeTransfer is a helper method to define mock.On call
//   - transferCode string
func (_e *MockPaystackClient_Expecter) FinalizeTransfer(transferCode interface{}) *MockPaystackClient_FinalizeTransfer_Call {
	return &MockPaystackClient_FinalizeTransfer_Call{Call: _e.mock.On("FinalizeTransfer", transferCode)}
}

func (_c *MockPaystackClient_FinalizeTransfer_Call) Run(run func(transferCode string)) *MockPaystackClient_FinalizeTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPaystackClient_FinalizeTransfer_Call) Return(_a0 *paystack.FinalizeTransferResponse, _a1 error) *MockPaystackClient_FinalizeTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_FinalizeTransfer_Call) RunAndReturn(run func(string) (*paystack.FinalizeTransferResponse, error)) *MockPaystackClient_FinalizeTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetBanks provides a mock function with no fields
func (_m *MockPaystackClient) GetBanks() (*paystack.BankListResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBanks")
	}

	var r0 *paystack.BankListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*paystack.BankListResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *paystack.BankListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.BankListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_GetBanks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBanks'
type MockPaystackClient_GetBanks_Call struct {
	*mock.Call
}

// GetBanks is a helper method to define mock.On call
func (_e *MockPaystackClient_Expecter) GetBanks() *MockPaystackClient_GetBanks_Call {
	return &MockPaystackClient_GetBanks_Call{Call: _e.mock.On("GetBanks")}
}

func (_c *MockPaystackClient_GetBanks_Call) Run(run func()) *MockPaystackClient_GetBanks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPaystackClient_GetBanks_Call) Return(_a0 *paystack.BankListResponse, _a1 error) *MockPaystackClient_GetBanks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_GetBanks_Call) RunAndReturn(run func() (*paystack.BankListResponse, error)) *MockPaystackClient_GetBanks_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateTransaction provides a mock function with given fields: email, currency, amount
func (_m *MockPaystackClient) InitiateTransaction(email string, currency string, amount float64) (*paystack.TransactionResponse, error) {
	ret := _m.Called(email, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for InitiateTransaction")
	}

	var r0 *paystack.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, float64) (*paystack.TransactionResponse, error)); ok {
		return rf(email, currency, amount)
	}
	if rf, ok := ret.Get(0).(func(string, string, float64) *paystack.TransactionResponse); ok {
		r0 = rf(email, currency, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, float64) error); ok {
		r1 = rf(email, currency, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_InitiateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateTransaction'
type MockPaystackClient_InitiateTransaction_Call struct {
	*mock.Call
}

// InitiateTransaction is a helper method to define mock.On call
//   - email string
//   - currency string
//   - amount float64
func (_e *MockPaystackClient_Expecter) InitiateTransaction(email interface{}, currency interface{}, amount interface{}) *MockPaystackClient_InitiateTransaction_Call {
	return &MockPaystackClient_InitiateTransaction_Call{Call: _e.mock.On("InitiateTransaction", email, currency, amount)}
}

func (_c *MockPaystackClient_InitiateTransaction_Call) Run(run func(email string, currency string, amount float64)) *MockPaystackClient_InitiateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockPaystackClient_InitiateTransaction_Call) Return(_a0 *paystack.TransactionResponse, _a1 error) *MockPaystackClient_InitiateTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_InitiateTransaction_Call) RunAndReturn(run func(string, string, float64) (*paystack.TransactionResponse, error)) *MockPaystackClient_InitiateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateTransfer provides a mock function with given fields: transfer
func (_m *MockPaystackClient) InitiateTransfer(transfer paystack.Transfer) (*paystack.TransactionResponse, error) {
	ret := _m.Called(transfer)

	if len(ret) == 0 {
		panic("no return value specified for InitiateTransfer")
	}

	var r0 *paystack.TransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(paystack.Transfer) (*paystack.TransactionResponse, error)); ok {
		return rf(transfer)
	}
	if rf, ok := ret.Get(0).(func(paystack.Transfer) *paystack.TransactionResponse); ok {
		r0 = rf(transfer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.TransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(paystack.Transfer) error); ok {
		r1 = rf(transfer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_InitiateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateTransfer'
type MockPaystackClient_InitiateTransfer_Call struct {
	*mock.Call
}

// InitiateTransfer is a helper method to define mock.On call
//   - transfer paystack.Transfer
func (_e *MockPaystackClient_Expecter) InitiateTransfer(transfer interface{}) *MockPaystackClient_InitiateTransfer_Call {
	return &MockPaystackClient_InitiateTransfer_Call{Call: _e.mock.On("InitiateTransfer", transfer)}
}

func (_c *MockPaystackClient_InitiateTransfer_Call) Run(run func(transfer paystack.Transfer)) *MockPaystackClient_InitiateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(paystack.Transfer))
	})
	return _c
}

func (_c *MockPaystackClient_InitiateTransfer_Call) Return(_a0 *paystack.TransactionResponse, _a1 error) *MockPaystackClient_InitiateTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_InitiateTransfer_Call) RunAndReturn(run func(paystack.Transfer) (*paystack.TransactionResponse, error)) *MockPaystackClient_InitiateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveAccount provides a mock function with given fields: accountNumber, bankCode
func (_m *MockPaystackClient) ResolveAccount(accountNumber string, bankCode string) (*paystack.ResolveAccountResponse, error) {
	ret := _m.Called(accountNumber, bankCode)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAccount")
	}

	var r0 *paystack.ResolveAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*paystack.ResolveAccountResponse, error)); ok {
		return rf(accountNumber, bankCode)
	}
	if rf, ok := ret.Get(0).(func(string, string) *paystack.ResolveAccountResponse); ok {
		r0 = rf(accountNumber, bankCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.ResolveAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountNumber, bankCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_ResolveAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveAccount'
type MockPaystackClient_ResolveAccount_Call struct {
	*mock.Call
}

// ResolveAccount is a helper method to define mock.On call
//   - accountNumber string
//   - bankCode string
func (_e *MockPaystackClient_Expecter) ResolveAccount(accountNumber interface{}, bankCode interface{}) *MockPaystackClient_ResolveAccount_Call {
	return &MockPaystackClient_ResolveAccount_Call{Call: _e.mock.On("ResolveAccount", accountNumber, bankCode)}
}

func (_c *MockPaystackClient_ResolveAccount_Call) Run(run func(accountNumber string, bankCode string)) *MockPaystackClient_ResolveAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockPaystackClient_ResolveAccount_Call) Return(_a0 *paystack.ResolveAccountResponse, _a1 error) *MockPaystackClient_ResolveAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_ResolveAccount_Call) RunAndReturn(run func(string, string) (*paystack.ResolveAccountResponse, error)) *MockPaystackClient_ResolveAccount_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyTransaction provides a mock function with given fields: reference
func (_m *MockPaystackClient) VerifyTransaction(reference string) (*paystack.VerifyTransactionResponse, error) {
	ret := _m.Called(reference)

	if len(ret) == 0 {
		panic("no return value specified for VerifyTransaction")
	}

	var r0 *paystack.VerifyTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*paystack.VerifyTransactionResponse, error)); ok {
		return rf(reference)
	}
	if rf, ok := ret.Get(0).(func(string) *paystack.VerifyTransactionResponse); ok {
		r0 = rf(reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*paystack.VerifyTransactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaystackClient_VerifyTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyTransaction'
type MockPaystackClient_VerifyTransaction_Call struct {
	*mock.Call
}

// VerifyTransaction is a helper method to define mock.On call
//   - reference string
func (_e *MockPaystackClient_Expecter) VerifyTransaction(reference interface{}) *MockPaystackClient_VerifyTransaction_Call {
	return &MockPaystackClient_VerifyTransaction_Call{Call: _e.mock.On("VerifyTransaction", reference)}
}

func (_c *MockPaystackClient_VerifyTransaction_Call) Run(run func(reference string)) *MockPaystackClient_VerifyTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPaystackClient_VerifyTransaction_Call) Return(_a0 *paystack.VerifyTransactionResponse, _a1 error) *MockPaystackClient_VerifyTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaystackClient_VerifyTransaction_Call) RunAndReturn(run func(string) (*paystack.VerifyTransactionResponse, error)) *MockPaystackClient_VerifyTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaystackClient creates a new instance of MockPaystackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaystackClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaystackClient {
	mock := &MockPaystackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
